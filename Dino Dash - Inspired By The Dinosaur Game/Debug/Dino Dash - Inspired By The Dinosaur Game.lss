
Dino Dash - Inspired By The Dinosaur Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000024dc  00002570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800106  00800106  00002576  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005108  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d4  00000000  00000000  00007938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024a8  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  0000a6b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000881  00000000  00000000  0000ae04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002416  00000000  00000000  0000b685  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000da9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ca 00 	jmp	0x194	; 0x194 <__ctors_end>
       4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
       8:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_2>
       c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      10:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      14:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      18:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      1c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      20:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      24:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      28:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      2c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      30:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      34:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      38:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      3c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      40:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__vector_16>
      44:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      48:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      4c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      50:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      54:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      58:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      5c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      60:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      64:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	ff 81       	ldd	r31, Y+7	; 0x07
      6a:	81 ff       	sbrs	r24, 1
      6c:	00 ff       	sbrs	r16, 0
      6e:	00 00       	nop
      70:	f9 89       	ldd	r31, Y+17	; 0x11
      72:	89 8f       	std	Y+25, r24	; 0x19
      74:	89 89       	ldd	r24, Y+17	; 0x11
      76:	89 ff       	.word	0xff89	; ????
      78:	0f 08       	sbc	r0, r15
      7a:	08 ff       	.word	0xff08	; ????
      7c:	8f 89       	ldd	r24, Y+23	; 0x17
      7e:	89 f9       	.word	0xf989	; ????
      80:	ff 89       	ldd	r31, Y+23	; 0x17
      82:	89 f9       	.word	0xf989	; ????
      84:	01 01       	movw	r0, r2
      86:	01 ff       	sbrs	r16, 1
      88:	ff 89       	ldd	r31, Y+23	; 0x17
      8a:	89 ff       	.word	0xff89	; ????
      8c:	0f 09       	sbc	r16, r15
      8e:	09 ff       	.word	0xff09	; ????

00000090 <scoreLetters>:
      90:	8f 89 89 89 f9 ff 81 81 81 81 ff 81 81 81 ff ff     ................
      a0:	19 29 49 86 ff 89 89 89 81                          .)I......

000000a9 <Letters>:
      a9:	ff 41 41 41 41 3e 00 ff 00 00 00 00 00 00 ff 00     .AAAA>..........
      b9:	00 00 00 ff 00 ff 80 80 80 80 ff 00 ff 81 81 81     ................
      c9:	81 81 00 80 80 80 80 80 ff 00 ff 80 80 80 80 ff     ................
      d9:	00 ff 00 00 00 00 ff 00 01 01 01 ff 01 01 01 00     ................
      e9:	00 00 ff 00 00 00 ff 01 01 01 01 ff 00 ff 80 80     ................
      f9:	80 80 ff 00 01 01 01 ff 01 01 01 80 80 80 ff 80     ................
     109:	80 80 ff 01 01 01 01 01 00 ff 80 80 80 80 80 00     ................
     119:	ff 80 40 30 0c 03 00 ff 01 02 0c 30 c0 00 ff 81     ..@0.......0....
     129:	81 81 81 ff 00 ff 00 00 00 00 ff 00 ff c1 41 41     ..............AA
     139:	41 3e 00 ff 00 03 0c 30 c0 00 ff 81 81 81 81 01     A>.....0........
     149:	00 ff 80 80 80 80 80 00 ff 0f f0 00 00 ff 00 ff     ................
     159:	00 00 0f f0 ff 00                                   ......

0000015f <Pterodactyl>:
     15f:	04 06 07 0c fc 7c 1c 1c 14 14 04                    .....|.....

0000016a <Cactus>:
     16a:	00 00 e0 e0 00 00 0f 08 ff ff 08 0f                 ............

00000176 <Rex>:
     176:	e0 c0 80 00 00 80 c0 c0 e0 f8 fc 74 5c 5c 18 03     ...........t\\..
     186:	07 07 0f ff bf 1f 0f 1f ff 87 01 03 00 00           ..............

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf ef       	ldi	r28, 0xFF	; 255
     19a:	d8 e0       	ldi	r29, 0x08	; 8
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	11 e0       	ldi	r17, 0x01	; 1
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	ec ed       	ldi	r30, 0xDC	; 220
     1a8:	f4 e2       	ldi	r31, 0x24	; 36
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x10>
     1ac:	05 90       	lpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	a6 30       	cpi	r26, 0x06	; 6
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0xc>

000001b6 <__do_clear_bss>:
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	a6 e0       	ldi	r26, 0x06	; 6
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	a9 31       	cpi	r26, 0x19	; 25
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	0e 94 09 10 	call	0x2012	; 0x2012 <main>
     1ca:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <_exit>

000001ce <__bad_interrupt>:
     1ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d2 <max>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     1d2:	68 17       	cp	r22, r24
     1d4:	08 f0       	brcs	.+2      	; 0x1d8 <max+0x6>
     1d6:	86 2f       	mov	r24, r22
     1d8:	08 95       	ret

000001da <activeCounter>:
     1da:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cactusOne>
     1de:	88 23       	and	r24, r24
     1e0:	19 f0       	breq	.+6      	; 0x1e8 <activeCounter+0xe>
     1e2:	8f 5f       	subi	r24, 0xFF	; 255
     1e4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <cactusOne>
     1e8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cactusTwo>
     1ec:	88 23       	and	r24, r24
     1ee:	19 f0       	breq	.+6      	; 0x1f6 <activeCounter+0x1c>
     1f0:	8f 5f       	subi	r24, 0xFF	; 255
     1f2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cactusTwo>
     1f6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pteroOne>
     1fa:	88 23       	and	r24, r24
     1fc:	19 f0       	breq	.+6      	; 0x204 <activeCounter+0x2a>
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <pteroOne>
     204:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pteroTwo>
     208:	88 23       	and	r24, r24
     20a:	19 f0       	breq	.+6      	; 0x212 <activeCounter+0x38>
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pteroTwo>
     212:	08 95       	ret

00000214 <checkCactus>:
     214:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cactusOne>
     218:	81 11       	cpse	r24, r1
     21a:	04 c0       	rjmp	.+8      	; 0x224 <checkCactus+0x10>
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <cactusOne>
     222:	08 95       	ret
     224:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cactusTwo>
     228:	81 11       	cpse	r24, r1
     22a:	03 c0       	rjmp	.+6      	; 0x232 <checkCactus+0x1e>
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cactusTwo>
     232:	08 95       	ret

00000234 <checkPterodactyl>:
     234:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pteroOne>
     238:	81 11       	cpse	r24, r1
     23a:	04 c0       	rjmp	.+8      	; 0x244 <checkPterodactyl+0x10>
     23c:	8f 5f       	subi	r24, 0xFF	; 255
     23e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <pteroOne>
     242:	08 95       	ret
     244:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pteroTwo>
     248:	81 11       	cpse	r24, r1
     24a:	03 c0       	rjmp	.+6      	; 0x252 <checkPterodactyl+0x1e>
     24c:	8f 5f       	subi	r24, 0xFF	; 255
     24e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pteroTwo>
     252:	08 95       	ret

00000254 <Timer0Settings>:
     254:	16 bc       	out	0x26, r1	; 38
     256:	85 b5       	in	r24, 0x25	; 37
     258:	85 60       	ori	r24, 0x05	; 5
     25a:	85 bd       	out	0x25, r24	; 37
     25c:	ee e6       	ldi	r30, 0x6E	; 110
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	81 60       	ori	r24, 0x01	; 1
     264:	80 83       	st	Z, r24
     266:	08 95       	ret

00000268 <_delay_5ms>:
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	05 c0       	rjmp	.+10     	; 0x276 <_delay_5ms+0xe>
     26c:	e0 ea       	ldi	r30, 0xA0	; 160
     26e:	ff e0       	ldi	r31, 0x0F	; 15
     270:	31 97       	sbiw	r30, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <_delay_5ms+0x8>
     274:	8f 5f       	subi	r24, 0xFF	; 255
     276:	85 30       	cpi	r24, 0x05	; 5
     278:	c9 f7       	brne	.-14     	; 0x26c <_delay_5ms+0x4>
     27a:	08 95       	ret

0000027c <_delay_10ms>:
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	05 c0       	rjmp	.+10     	; 0x28a <_delay_10ms+0xe>
     280:	e0 e4       	ldi	r30, 0x40	; 64
     282:	ff e1       	ldi	r31, 0x1F	; 31
     284:	31 97       	sbiw	r30, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <_delay_10ms+0x8>
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	85 30       	cpi	r24, 0x05	; 5
     28c:	c9 f7       	brne	.-14     	; 0x280 <_delay_10ms+0x4>
     28e:	08 95       	ret

00000290 <__vector_2>:
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	af 93       	push	r26
     2ac:	bf 93       	push	r27
     2ae:	ef 93       	push	r30
     2b0:	ff 93       	push	r31
     2b2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <resetCount>
     2b6:	88 23       	and	r24, r24
     2b8:	41 f0       	breq	.+16     	; 0x2ca <__vector_2+0x3a>
     2ba:	88 b1       	in	r24, 0x08	; 8
     2bc:	8b 7f       	andi	r24, 0xFB	; 251
     2be:	88 b9       	out	0x08, r24	; 8
     2c0:	0e 94 3e 01 	call	0x27c	; 0x27c <_delay_10ms>
     2c4:	88 b1       	in	r24, 0x08	; 8
     2c6:	84 60       	ori	r24, 0x04	; 4
     2c8:	88 b9       	out	0x08, r24	; 8
     2ca:	ff 91       	pop	r31
     2cc:	ef 91       	pop	r30
     2ce:	bf 91       	pop	r27
     2d0:	af 91       	pop	r26
     2d2:	9f 91       	pop	r25
     2d4:	8f 91       	pop	r24
     2d6:	7f 91       	pop	r23
     2d8:	6f 91       	pop	r22
     2da:	5f 91       	pop	r21
     2dc:	4f 91       	pop	r20
     2de:	3f 91       	pop	r19
     2e0:	2f 91       	pop	r18
     2e2:	0f 90       	pop	r0
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	0f 90       	pop	r0
     2e8:	1f 90       	pop	r1
     2ea:	18 95       	reti

000002ec <ADCint>:
     2ec:	80 e4       	ldi	r24, 0x40	; 64
     2ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     2f2:	ea e7       	ldi	r30, 0x7A	; 122
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 ea       	ldi	r24, 0xA0	; 160
     2f8:	80 83       	st	Z, r24
     2fa:	80 81       	ld	r24, Z
     2fc:	87 60       	ori	r24, 0x07	; 7
     2fe:	80 83       	st	Z, r24
     300:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     304:	08 95       	ret

00000306 <_delay_10us>:
     306:	88 e2       	ldi	r24, 0x28	; 40
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <_delay_10us+0x4>
     30e:	08 95       	ret

00000310 <read_adc>:
     310:	80 64       	ori	r24, 0x40	; 64
     312:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     316:	0e 94 83 01 	call	0x306	; 0x306 <_delay_10us>
     31a:	ea e7       	ldi	r30, 0x7A	; 122
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	80 64       	ori	r24, 0x40	; 64
     322:	80 83       	st	Z, r24
     324:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     328:	84 ff       	sbrs	r24, 4
     32a:	fc cf       	rjmp	.-8      	; 0x324 <read_adc+0x14>
     32c:	ea e7       	ldi	r30, 0x7A	; 122
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	80 61       	ori	r24, 0x10	; 16
     334:	80 83       	st	Z, r24
     336:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     33a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     33e:	08 95       	ret

00000340 <LEDOn>:
     340:	8b b1       	in	r24, 0x0b	; 11
     342:	80 61       	ori	r24, 0x10	; 16
     344:	8b b9       	out	0x0b, r24	; 11
     346:	08 95       	ret

00000348 <LEDOff>:
     348:	8b b1       	in	r24, 0x0b	; 11
     34a:	8f 7e       	andi	r24, 0xEF	; 239
     34c:	8b b9       	out	0x0b, r24	; 11
     34e:	08 95       	ret

00000350 <buzzerToggle>:
     350:	8b b1       	in	r24, 0x0b	; 11
     352:	80 68       	ori	r24, 0x80	; 128
     354:	8b b9       	out	0x0b, r24	; 11
     356:	0e 94 3e 01 	call	0x27c	; 0x27c <_delay_10ms>
     35a:	8b b1       	in	r24, 0x0b	; 11
     35c:	8f 77       	andi	r24, 0x7F	; 127
     35e:	8b b9       	out	0x0b, r24	; 11
     360:	08 95       	ret

00000362 <buzzerOn>:
     362:	8b b1       	in	r24, 0x0b	; 11
     364:	80 68       	ori	r24, 0x80	; 128
     366:	8b b9       	out	0x0b, r24	; 11
     368:	08 95       	ret

0000036a <buzzerOff>:
     36a:	8b b1       	in	r24, 0x0b	; 11
     36c:	8f 77       	andi	r24, 0x7F	; 127
     36e:	8b b9       	out	0x0b, r24	; 11
     370:	08 95       	ret

00000372 <i2c_init>:
     372:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     376:	88 e4       	ldi	r24, 0x48	; 72
     378:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     37c:	08 95       	ret

0000037e <i2c_start>:
     37e:	94 ea       	ldi	r25, 0xA4	; 164
     380:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     384:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     388:	99 23       	and	r25, r25
     38a:	e4 f7       	brge	.-8      	; 0x384 <i2c_start+0x6>
     38c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     390:	98 7f       	andi	r25, 0xF8	; 248
     392:	98 30       	cpi	r25, 0x08	; 8
     394:	11 f0       	breq	.+4      	; 0x39a <i2c_start+0x1c>
     396:	90 31       	cpi	r25, 0x10	; 16
     398:	91 f4       	brne	.+36     	; 0x3be <i2c_start+0x40>
     39a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     39e:	84 e8       	ldi	r24, 0x84	; 132
     3a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3a8:	88 23       	and	r24, r24
     3aa:	e4 f7       	brge	.-8      	; 0x3a4 <i2c_start+0x26>
     3ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     3b0:	88 7f       	andi	r24, 0xF8	; 248
     3b2:	88 31       	cpi	r24, 0x18	; 24
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <i2c_start+0x44>
     3b6:	80 34       	cpi	r24, 0x40	; 64
     3b8:	31 f4       	brne	.+12     	; 0x3c6 <i2c_start+0x48>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	08 95       	ret
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	08 95       	ret
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	08 95       	ret
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	08 95       	ret

000003ca <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     3ca:	84 e9       	ldi	r24, 0x94	; 148
     3cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     3d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3d4:	84 fd       	sbrc	r24, 4
     3d6:	fc cf       	rjmp	.-8      	; 0x3d0 <i2c_stop+0x6>

}/* i2c_stop */
     3d8:	08 95       	ret

000003da <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     3da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     3de:	84 e8       	ldi	r24, 0x84	; 132
     3e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     3e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3e8:	88 23       	and	r24, r24
     3ea:	e4 f7       	brge	.-8      	; 0x3e4 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     3ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     3f0:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     3f2:	88 32       	cpi	r24, 0x28	; 40
     3f4:	11 f0       	breq	.+4      	; 0x3fa <i2c_write+0x20>
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	08 95       	ret
	return 0;
     3fa:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
     3fc:	08 95       	ret

000003fe <sendOneCommandByte>:
		sendData(pgm_read_byte(&Letters[index][i]));
	}
}

// Sends one command byte to the screen
void sendOneCommandByte(unsigned char cmd) {
     3fe:	cf 93       	push	r28
     400:	c8 2f       	mov	r28, r24
	i2c_start((unsigned char)0x78 + I2C_WRITE);
     402:	88 e7       	ldi	r24, 0x78	; 120
     404:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_start>
	i2c_write(0x00);
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_write>
	i2c_write(cmd);
     40e:	8c 2f       	mov	r24, r28
     410:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_write>
	i2c_stop(); 
     414:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_stop>
}
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <position>:
	i2c_write(data);
	i2c_stop();
}

// Sets the position of the cursor on the display
void position(unsigned char x, unsigned char y) {
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	c8 2f       	mov	r28, r24
     422:	d6 2f       	mov	r29, r22
	sendOneCommandByte(0x00 + (x & 0x0F));
     424:	8f 70       	andi	r24, 0x0F	; 15
     426:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0x10 + ((x >> 4) & 0x0F));
     42a:	8c 2f       	mov	r24, r28
     42c:	82 95       	swap	r24
     42e:	8f 70       	andi	r24, 0x0F	; 15
     430:	80 5f       	subi	r24, 0xF0	; 240
     432:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0xB0 + y);
     436:	80 eb       	ldi	r24, 0xB0	; 176
     438:	8d 0f       	add	r24, r29
     43a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <sendTwoCommandByte>:
	i2c_write(cmd);
	i2c_stop(); 
}

// Sends two command bytes to the screen
void sendTwoCommandByte(unsigned char cmdOne, unsigned char cmdTwo) {
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	d8 2f       	mov	r29, r24
     44a:	c6 2f       	mov	r28, r22
	i2c_start((unsigned char)0x78 + I2C_WRITE);
     44c:	88 e7       	ldi	r24, 0x78	; 120
     44e:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_start>
	i2c_write(0x00);
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_write>
	i2c_write(cmdOne);
     458:	8d 2f       	mov	r24, r29
     45a:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_write>
	i2c_write(cmdTwo);
     45e:	8c 2f       	mov	r24, r28
     460:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_write>
	i2c_stop();
     464:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_stop>
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <sendData>:

// Sends one data byte to the screen
// Logic 1 turns a pixel on the display on
void sendData(unsigned char data) {
     46e:	cf 93       	push	r28
     470:	c8 2f       	mov	r28, r24
	i2c_start((unsigned char)0x78 + I2C_WRITE);
     472:	88 e7       	ldi	r24, 0x78	; 120
     474:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_start>
	i2c_write(0x40);
     478:	80 e4       	ldi	r24, 0x40	; 64
     47a:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_write>
	i2c_write(data);
     47e:	8c 2f       	mov	r24, r28
     480:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_write>
	i2c_stop();
     484:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_stop>
}
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <duckingOne>:
	drawRex();
}

// First frame of the ducking animation
void duckingOne() {
	rexMode = 25;
     48c:	89 e1       	ldi	r24, 0x19	; 25
     48e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	position(8,5);
     492:	65 e0       	ldi	r22, 0x05	; 5
     494:	88 e0       	ldi	r24, 0x08	; 8
     496:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x80);
     49a:	80 e8       	ldi	r24, 0x80	; 128
     49c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     4a0:	80 e8       	ldi	r24, 0x80	; 128
     4a2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     4b8:	80 e8       	ldi	r24, 0x80	; 128
     4ba:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     4be:	80 ec       	ldi	r24, 0xC0	; 192
     4c0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     4c4:	80 ec       	ldi	r24, 0xC0	; 192
     4c6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     4ca:	80 ec       	ldi	r24, 0xC0	; 192
     4cc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF0);
     4d0:	80 ef       	ldi	r24, 0xF0	; 240
     4d2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF8);
     4d6:	88 ef       	ldi	r24, 0xF8	; 248
     4d8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xE8);
     4dc:	88 ee       	ldi	r24, 0xE8	; 232
     4de:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xB8);
     4e2:	88 eb       	ldi	r24, 0xB8	; 184
     4e4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xB8);
     4e8:	88 eb       	ldi	r24, 0xB8	; 184
     4ea:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x30);
     4ee:	80 e3       	ldi	r24, 0x30	; 48
     4f0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,6);
     4f4:	66 e0       	ldi	r22, 0x06	; 6
     4f6:	88 e0       	ldi	r24, 0x08	; 8
     4f8:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x03);
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x03);
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x07);
     508:	87 e0       	ldi	r24, 0x07	; 7
     50a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x07);
     50e:	87 e0       	ldi	r24, 0x07	; 7
     510:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     514:	8f ef       	ldi	r24, 0xFF	; 255
     516:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xBF);
     51a:	8f eb       	ldi	r24, 0xBF	; 191
     51c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     520:	8f e1       	ldi	r24, 0x1F	; 31
     522:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     526:	8f e0       	ldi	r24, 0x0F	; 15
     528:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     52c:	8f e1       	ldi	r24, 0x1F	; 31
     52e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x87);
     538:	87 e8       	ldi	r24, 0x87	; 135
     53a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x02);
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x06);
     544:	86 e0       	ldi	r24, 0x06	; 6
     546:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
     556:	08 95       	ret

00000558 <duckingTwo>:
}

// Second frame of the ducking animation
void duckingTwo() {
	rexMode = 26;
     558:	8a e1       	ldi	r24, 0x1A	; 26
     55a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	position(8,5);
     55e:	65 e0       	ldi	r22, 0x05	; 5
     560:	88 e0       	ldi	r24, 0x08	; 8
     562:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x00);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     58a:	80 e8       	ldi	r24, 0x80	; 128
     58c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     590:	80 e8       	ldi	r24, 0x80	; 128
     592:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     596:	80 e8       	ldi	r24, 0x80	; 128
     598:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     59c:	80 e8       	ldi	r24, 0x80	; 128
     59e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xE0);
     5a2:	80 ee       	ldi	r24, 0xE0	; 224
     5a4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF0);
     5a8:	80 ef       	ldi	r24, 0xF0	; 240
     5aa:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xD0);
     5ae:	80 ed       	ldi	r24, 0xD0	; 208
     5b0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x70);
     5b4:	80 e7       	ldi	r24, 0x70	; 112
     5b6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x70);
     5ba:	80 e7       	ldi	r24, 0x70	; 112
     5bc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x60);
     5c0:	80 e6       	ldi	r24, 0x60	; 96
     5c2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,6);
     5c6:	66 e0       	ldi	r22, 0x06	; 6
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x0F);
     5ce:	8f e0       	ldi	r24, 0x0F	; 15
     5d0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     5d4:	8f e0       	ldi	r24, 0x0F	; 15
     5d6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     5da:	8f e0       	ldi	r24, 0x0F	; 15
     5dc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     5e0:	8f e0       	ldi	r24, 0x0F	; 15
     5e2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xBF);
     5ec:	8f eb       	ldi	r24, 0xBF	; 191
     5ee:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     5f2:	8f e1       	ldi	r24, 0x1F	; 31
     5f4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     5f8:	8f e0       	ldi	r24, 0x0F	; 15
     5fa:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     5fe:	8f e1       	ldi	r24, 0x1F	; 31
     600:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x87);
     60a:	87 e8       	ldi	r24, 0x87	; 135
     60c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x05);
     610:	85 e0       	ldi	r24, 0x05	; 5
     612:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0D);
     616:	8d e0       	ldi	r24, 0x0D	; 13
     618:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x01);
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x01);
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
     62e:	08 95       	ret

00000630 <duckingThree>:
}

// Third frame of the ducking animation
void duckingThree() {
	rexMode = 27;
     630:	8b e1       	ldi	r24, 0x1B	; 27
     632:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	position(8,5);
     636:	65 e0       	ldi	r22, 0x05	; 5
     638:	88 e0       	ldi	r24, 0x08	; 8
     63a:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x00);
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     65c:	80 e8       	ldi	r24, 0x80	; 128
     65e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     662:	80 e8       	ldi	r24, 0x80	; 128
     664:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     668:	80 e8       	ldi	r24, 0x80	; 128
     66a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     66e:	80 e8       	ldi	r24, 0x80	; 128
     670:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     680:	80 e8       	ldi	r24, 0x80	; 128
     682:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     686:	80 ec       	ldi	r24, 0xC0	; 192
     688:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x40);
     68c:	80 e4       	ldi	r24, 0x40	; 64
     68e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     692:	80 ec       	ldi	r24, 0xC0	; 192
     694:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     698:	80 ec       	ldi	r24, 0xC0	; 192
     69a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     69e:	80 e8       	ldi	r24, 0x80	; 128
     6a0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,6);
     6a4:	66 e0       	ldi	r22, 0x06	; 6
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x1E);
     6ac:	8e e1       	ldi	r24, 0x1E	; 30
     6ae:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1E);
     6b2:	8e e1       	ldi	r24, 0x1E	; 30
     6b4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     6b8:	8f e0       	ldi	r24, 0x0F	; 15
     6ba:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     6be:	8f e0       	ldi	r24, 0x0F	; 15
     6c0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xBF);
     6ca:	8f eb       	ldi	r24, 0xBF	; 191
     6cc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     6d0:	8f e1       	ldi	r24, 0x1F	; 31
     6d2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     6d6:	8f e0       	ldi	r24, 0x0F	; 15
     6d8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     6dc:	8f e1       	ldi	r24, 0x1F	; 31
     6de:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x87);
     6e8:	87 e8       	ldi	r24, 0x87	; 135
     6ea:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     6ee:	8f e1       	ldi	r24, 0x1F	; 31
     6f0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x17);
     6f4:	87 e1       	ldi	r24, 0x17	; 23
     6f6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x07);
     6fa:	87 e0       	ldi	r24, 0x07	; 7
     6fc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x05);
     700:	85 e0       	ldi	r24, 0x05	; 5
     702:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x05);
     706:	85 e0       	ldi	r24, 0x05	; 5
     708:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x01);
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
     712:	08 95       	ret

00000714 <duckingFour>:
}

// Fourth frame of the ducking animation
void duckingFour() {
	rexMode = 28;
     714:	8c e1       	ldi	r24, 0x1C	; 28
     716:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	
	position(8,6);
     71a:	66 e0       	ldi	r22, 0x06	; 6
     71c:	88 e0       	ldi	r24, 0x08	; 8
     71e:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0xF8);
     722:	88 ef       	ldi	r24, 0xF8	; 248
     724:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x7C);
     728:	8c e7       	ldi	r24, 0x7C	; 124
     72a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x3C);
     72e:	8c e3       	ldi	r24, 0x3C	; 60
     730:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1E);
     734:	8e e1       	ldi	r24, 0x1E	; 30
     736:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     73a:	8f ef       	ldi	r24, 0xFF	; 255
     73c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xBF);
     740:	8f eb       	ldi	r24, 0xBF	; 191
     742:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     746:	8f e1       	ldi	r24, 0x1F	; 31
     748:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     74c:	8f e0       	ldi	r24, 0x0F	; 15
     74e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     752:	8f e1       	ldi	r24, 0x1F	; 31
     754:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x8E);
     75e:	8e e8       	ldi	r24, 0x8E	; 142
     760:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x3E);
     764:	8e e3       	ldi	r24, 0x3E	; 62
     766:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x2F);
     76a:	8f e2       	ldi	r24, 0x2F	; 47
     76c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     770:	8f e0       	ldi	r24, 0x0F	; 15
     772:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1D);
     776:	8d e1       	ldi	r24, 0x1D	; 29
     778:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x17);
     77c:	87 e1       	ldi	r24, 0x17	; 23
     77e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x17);
     782:	87 e1       	ldi	r24, 0x17	; 23
     784:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x06);
     788:	86 e0       	ldi	r24, 0x06	; 6
     78a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
     78e:	08 95       	ret

00000790 <duckingRex>:
	
}

///////////////////////////////////////////////////////////////////////////////////////////////
// Ducking animation for the T-Rex
void duckingRex() {
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
	duckingOne();
     794:	0e 94 46 02 	call	0x48c	; 0x48c <duckingOne>
	_delay_10ms();
     798:	0e 94 3e 01 	call	0x27c	; 0x27c <_delay_10ms>
	duckingTwo();
     79c:	0e 94 ac 02 	call	0x558	; 0x558 <duckingTwo>
	_delay_10ms();
     7a0:	0e 94 3e 01 	call	0x27c	; 0x27c <_delay_10ms>
	duckingThree();
     7a4:	0e 94 18 03 	call	0x630	; 0x630 <duckingThree>
	_delay_10ms();
     7a8:	0e 94 3e 01 	call	0x27c	; 0x27c <_delay_10ms>
	position(8,5);
     7ac:	65 e0       	ldi	r22, 0x05	; 5
     7ae:	88 e0       	ldi	r24, 0x08	; 8
     7b0:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 18; i++) {
     7b4:	c0 e0       	ldi	r28, 0x00	; 0
     7b6:	d0 e0       	ldi	r29, 0x00	; 0
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <duckingRex+0x32>
		sendData(0x00);
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	duckingTwo();
	_delay_10ms();
	duckingThree();
	_delay_10ms();
	position(8,5);
	for (int i = 0; i < 18; i++) {
     7c0:	21 96       	adiw	r28, 0x01	; 1
     7c2:	c2 31       	cpi	r28, 0x12	; 18
     7c4:	d1 05       	cpc	r29, r1
     7c6:	cc f3       	brlt	.-14     	; 0x7ba <duckingRex+0x2a>
		sendData(0x00);
	}
	duckingFour();
     7c8:	0e 94 8a 03 	call	0x714	; 0x714 <duckingFour>
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <jumpingOne>:
	drawRex();
	rexMode = 0;
}

// First frame of the jumping animation
void jumpingOne(unsigned char top, unsigned char bottom) {
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	16 2f       	mov	r17, r22
	position(8,top);
     7da:	68 2f       	mov	r22, r24
     7dc:	88 e0       	ldi	r24, 0x08	; 8
     7de:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,5);
	for (int j = 0; j < 15; j++) {
     7e2:	c0 e0       	ldi	r28, 0x00	; 0
     7e4:	d0 e0       	ldi	r29, 0x00	; 0
     7e6:	14 c0       	rjmp	.+40     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		if (j < 13) {
     7e8:	cd 30       	cpi	r28, 0x0D	; 13
     7ea:	d1 05       	cpc	r29, r1
     7ec:	4c f4       	brge	.+18     	; 0x800 <__DATA_REGION_LENGTH__>
			sendData((pgm_read_byte(&Rex[0][j]) >> 1) | 0x80);
     7ee:	fe 01       	movw	r30, r28
     7f0:	ea 58       	subi	r30, 0x8A	; 138
     7f2:	fe 4f       	sbci	r31, 0xFE	; 254
     7f4:	84 91       	lpm	r24, Z
     7f6:	86 95       	lsr	r24
     7f8:	80 68       	ori	r24, 0x80	; 128
     7fa:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
     7fe:	07 c0       	rjmp	.+14     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		}
		else {
			sendData((pgm_read_byte(&Rex[0][j]) >> 1));
     800:	fe 01       	movw	r30, r28
     802:	ea 58       	subi	r30, 0x8A	; 138
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	84 91       	lpm	r24, Z
     808:	86 95       	lsr	r24
     80a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// First frame of the jumping animation
void jumpingOne(unsigned char top, unsigned char bottom) {
	position(8,top);
	//position(8,5);
	for (int j = 0; j < 15; j++) {
     80e:	21 96       	adiw	r28, 0x01	; 1
     810:	cf 30       	cpi	r28, 0x0F	; 15
     812:	d1 05       	cpc	r29, r1
     814:	4c f3       	brlt	.-46     	; 0x7e8 <jumpingOne+0x16>
		}
		else {
			sendData((pgm_read_byte(&Rex[0][j]) >> 1));
		}
	}
	position(8,bottom);
     816:	61 2f       	mov	r22, r17
     818:	88 e0       	ldi	r24, 0x08	; 8
     81a:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     81e:	c0 e0       	ldi	r28, 0x00	; 0
     820:	d0 e0       	ldi	r29, 0x00	; 0
     822:	08 c0       	rjmp	.+16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		sendData(pgm_read_byte(&Rex[1][j]) >> 1);
     824:	fe 01       	movw	r30, r28
     826:	eb 57       	subi	r30, 0x7B	; 123
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	84 91       	lpm	r24, Z
     82c:	86 95       	lsr	r24
     82e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
			sendData((pgm_read_byte(&Rex[0][j]) >> 1));
		}
	}
	position(8,bottom);
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     832:	21 96       	adiw	r28, 0x01	; 1
     834:	cf 30       	cpi	r28, 0x0F	; 15
     836:	d1 05       	cpc	r29, r1
     838:	ac f3       	brlt	.-22     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		sendData(pgm_read_byte(&Rex[1][j]) >> 1);
	}
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	08 95       	ret

00000842 <jumpingTwo>:

// Second frame of the jumping animation
void jumpingTwo(unsigned char top, unsigned char bottom) {
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	16 2f       	mov	r17, r22
	position(8,top);
     84a:	68 2f       	mov	r22, r24
     84c:	88 e0       	ldi	r24, 0x08	; 8
     84e:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,5);
	for (int j = 0; j < 15; j++) {
     852:	c0 e0       	ldi	r28, 0x00	; 0
     854:	d0 e0       	ldi	r29, 0x00	; 0
     856:	26 c0       	rjmp	.+76     	; 0x8a4 <jumpingTwo+0x62>
		if ((j < 11) || (j == 12)) {
     858:	cb 30       	cpi	r28, 0x0B	; 11
     85a:	d1 05       	cpc	r29, r1
     85c:	1c f0       	brlt	.+6      	; 0x864 <jumpingTwo+0x22>
     85e:	cc 30       	cpi	r28, 0x0C	; 12
     860:	d1 05       	cpc	r29, r1
     862:	51 f4       	brne	.+20     	; 0x878 <jumpingTwo+0x36>
			sendData((pgm_read_byte(&Rex[0][j]) >> 2) | 0xC0);
     864:	fe 01       	movw	r30, r28
     866:	ea 58       	subi	r30, 0x8A	; 138
     868:	fe 4f       	sbci	r31, 0xFE	; 254
     86a:	84 91       	lpm	r24, Z
     86c:	86 95       	lsr	r24
     86e:	86 95       	lsr	r24
     870:	80 6c       	ori	r24, 0xC0	; 192
     872:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
     876:	15 c0       	rjmp	.+42     	; 0x8a2 <jumpingTwo+0x60>
		}
		else if (j == 11) {
     878:	cb 30       	cpi	r28, 0x0B	; 11
     87a:	d1 05       	cpc	r29, r1
     87c:	51 f4       	brne	.+20     	; 0x892 <jumpingTwo+0x50>
			sendData((pgm_read_byte(&Rex[0][j]) >> 2) | 0x40);
     87e:	fe 01       	movw	r30, r28
     880:	ea 58       	subi	r30, 0x8A	; 138
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	84 91       	lpm	r24, Z
     886:	86 95       	lsr	r24
     888:	86 95       	lsr	r24
     88a:	80 64       	ori	r24, 0x40	; 64
     88c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
     890:	08 c0       	rjmp	.+16     	; 0x8a2 <jumpingTwo+0x60>
		}
		else {
			sendData((pgm_read_byte(&Rex[0][j]) >> 2));
     892:	fe 01       	movw	r30, r28
     894:	ea 58       	subi	r30, 0x8A	; 138
     896:	fe 4f       	sbci	r31, 0xFE	; 254
     898:	84 91       	lpm	r24, Z
     89a:	86 95       	lsr	r24
     89c:	86 95       	lsr	r24
     89e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// Second frame of the jumping animation
void jumpingTwo(unsigned char top, unsigned char bottom) {
	position(8,top);
	//position(8,5);
	for (int j = 0; j < 15; j++) {
     8a2:	21 96       	adiw	r28, 0x01	; 1
     8a4:	cf 30       	cpi	r28, 0x0F	; 15
     8a6:	d1 05       	cpc	r29, r1
     8a8:	bc f2       	brlt	.-82     	; 0x858 <jumpingTwo+0x16>
		}
		else {
			sendData((pgm_read_byte(&Rex[0][j]) >> 2));
		}
	}
	position(8,bottom);
     8aa:	61 2f       	mov	r22, r17
     8ac:	88 e0       	ldi	r24, 0x08	; 8
     8ae:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
     8b4:	d0 e0       	ldi	r29, 0x00	; 0
     8b6:	09 c0       	rjmp	.+18     	; 0x8ca <jumpingTwo+0x88>
		sendData(pgm_read_byte(&Rex[1][j]) >> 2);
     8b8:	fe 01       	movw	r30, r28
     8ba:	eb 57       	subi	r30, 0x7B	; 123
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	84 91       	lpm	r24, Z
     8c0:	86 95       	lsr	r24
     8c2:	86 95       	lsr	r24
     8c4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
			sendData((pgm_read_byte(&Rex[0][j]) >> 2));
		}
	}
	position(8,bottom);
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     8c8:	21 96       	adiw	r28, 0x01	; 1
     8ca:	cf 30       	cpi	r28, 0x0F	; 15
     8cc:	d1 05       	cpc	r29, r1
     8ce:	a4 f3       	brlt	.-24     	; 0x8b8 <jumpingTwo+0x76>
		sendData(pgm_read_byte(&Rex[1][j]) >> 2);
	}
}
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	08 95       	ret

000008d8 <jumpingThree>:

// Third frame of the jumping animation
void jumpingThree(unsigned char top, unsigned char middle, unsigned char bottom) {
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	06 2f       	mov	r16, r22
     8e2:	14 2f       	mov	r17, r20
	position(8,top);
     8e4:	68 2f       	mov	r22, r24
     8e6:	88 e0       	ldi	r24, 0x08	; 8
     8e8:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 10; i++) {
     8ec:	c0 e0       	ldi	r28, 0x00	; 0
     8ee:	d0 e0       	ldi	r29, 0x00	; 0
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <jumpingThree+0x22>
		sendData(0x00);
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
}

// Third frame of the jumping animation
void jumpingThree(unsigned char top, unsigned char middle, unsigned char bottom) {
	position(8,top);
	for (int i = 0; i < 10; i++) {
     8f8:	21 96       	adiw	r28, 0x01	; 1
     8fa:	ca 30       	cpi	r28, 0x0A	; 10
     8fc:	d1 05       	cpc	r29, r1
     8fe:	cc f3       	brlt	.-14     	; 0x8f2 <jumpingThree+0x1a>
     900:	c0 e0       	ldi	r28, 0x00	; 0
     902:	d0 e0       	ldi	r29, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__stack+0xf>
		sendData(0x00);
	} 
	//position(18,top);
	//position(18,4);
	for (int i = 0; i < 4; i++) {
		sendData(0x80);
     906:	80 e8       	ldi	r24, 0x80	; 128
     908:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int i = 0; i < 10; i++) {
		sendData(0x00);
	} 
	//position(18,top);
	//position(18,4);
	for (int i = 0; i < 4; i++) {
     90c:	21 96       	adiw	r28, 0x01	; 1
     90e:	c4 30       	cpi	r28, 0x04	; 4
     910:	d1 05       	cpc	r29, r1
     912:	cc f3       	brlt	.-14     	; 0x906 <__stack+0x7>
		sendData(0x80);
	}
	sendData(0x00);
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,middle);
     91a:	60 2f       	mov	r22, r16
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,5);
	sendData(0x7C);
     922:	8c e7       	ldi	r24, 0x7C	; 124
     924:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF8);
     928:	88 ef       	ldi	r24, 0xF8	; 248
     92a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF0);
     92e:	80 ef       	ldi	r24, 0xF0	; 240
     930:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xE0);
     934:	80 ee       	ldi	r24, 0xE0	; 224
     936:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xE0);
     93a:	80 ee       	ldi	r24, 0xE0	; 224
     93c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF0);
     940:	80 ef       	ldi	r24, 0xF0	; 240
     942:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF8);
     946:	88 ef       	ldi	r24, 0xF8	; 248
     948:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF8);
     94c:	88 ef       	ldi	r24, 0xF8	; 248
     94e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFC);
     952:	8c ef       	ldi	r24, 0xFC	; 252
     954:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x2E);
     964:	8e e2       	ldi	r24, 0x2E	; 46
     966:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x6B);
     96a:	8b e6       	ldi	r24, 0x6B	; 107
     96c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0B);
     970:	8b e0       	ldi	r24, 0x0B	; 11
     972:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x03);
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,bottom);
     97c:	61 2f       	mov	r22, r17
     97e:	88 e0       	ldi	r24, 0x08	; 8
     980:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     984:	c0 e0       	ldi	r28, 0x00	; 0
     986:	d0 e0       	ldi	r29, 0x00	; 0
     988:	0a c0       	rjmp	.+20     	; 0x99e <__stack+0x9f>
		sendData(pgm_read_byte(&Rex[1][j]) >> 3);
     98a:	fe 01       	movw	r30, r28
     98c:	eb 57       	subi	r30, 0x7B	; 123
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	84 91       	lpm	r24, Z
     992:	86 95       	lsr	r24
     994:	86 95       	lsr	r24
     996:	86 95       	lsr	r24
     998:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0B);
	sendData(0x03);
	
	position(8,bottom);
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     99c:	21 96       	adiw	r28, 0x01	; 1
     99e:	cf 30       	cpi	r28, 0x0F	; 15
     9a0:	d1 05       	cpc	r29, r1
     9a2:	9c f3       	brlt	.-26     	; 0x98a <__stack+0x8b>
		sendData(pgm_read_byte(&Rex[1][j]) >> 3);
	}
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	08 95       	ret

000009ae <jumpingFour>:

// Fourth frame of the jumping animation
void jumpingFour(unsigned char top, unsigned char middle, unsigned char bottom) {
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	06 2f       	mov	r16, r22
     9b8:	14 2f       	mov	r17, r20
	position(8,top);
     9ba:	68 2f       	mov	r22, r24
     9bc:	88 e0       	ldi	r24, 0x08	; 8
     9be:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 9; i++) {
     9c2:	c0 e0       	ldi	r28, 0x00	; 0
     9c4:	d0 e0       	ldi	r29, 0x00	; 0
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <jumpingFour+0x22>
		sendData(0x00);
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
}

// Fourth frame of the jumping animation
void jumpingFour(unsigned char top, unsigned char middle, unsigned char bottom) {
	position(8,top);
	for (int i = 0; i < 9; i++) {
     9ce:	21 96       	adiw	r28, 0x01	; 1
     9d0:	c9 30       	cpi	r28, 0x09	; 9
     9d2:	d1 05       	cpc	r29, r1
     9d4:	cc f3       	brlt	.-14     	; 0x9c8 <jumpingFour+0x1a>
		sendData(0x00);
	}
	//position(17,top);
	//position(17,4);
	sendData(0x80);
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     9dc:	80 ec       	ldi	r24, 0xC0	; 192
     9de:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x40);
     9e2:	80 e4       	ldi	r24, 0x40	; 64
     9e4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     9e8:	80 ec       	ldi	r24, 0xC0	; 192
     9ea:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     9ee:	80 ec       	ldi	r24, 0xC0	; 192
     9f0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     9f4:	80 e8       	ldi	r24, 0x80	; 128
     9f6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,middle);
     9fa:	60 2f       	mov	r22, r16
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,5);
	sendData(0x3E);
     a02:	8e e3       	ldi	r24, 0x3E	; 62
     a04:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x7C);
     a08:	8c e7       	ldi	r24, 0x7C	; 124
     a0a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x78);
     a0e:	88 e7       	ldi	r24, 0x78	; 120
     a10:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF0);
     a14:	80 ef       	ldi	r24, 0xF0	; 240
     a16:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF0);
     a1a:	80 ef       	ldi	r24, 0xF0	; 240
     a1c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF8);
     a20:	88 ef       	ldi	r24, 0xF8	; 248
     a22:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFC);
     a26:	8c ef       	ldi	r24, 0xFC	; 252
     a28:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFC);
     a2c:	8c ef       	ldi	r24, 0xFC	; 252
     a2e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFE);
     a32:	8e ef       	ldi	r24, 0xFE	; 254
     a34:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x7F);
     a3e:	8f e7       	ldi	r24, 0x7F	; 127
     a40:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x17);
     a44:	87 e1       	ldi	r24, 0x17	; 23
     a46:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x35);
     a4a:	85 e3       	ldi	r24, 0x35	; 53
     a4c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x05);
     a50:	85 e0       	ldi	r24, 0x05	; 5
     a52:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x01);
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,bottom);
     a5c:	61 2f       	mov	r22, r17
     a5e:	88 e0       	ldi	r24, 0x08	; 8
     a60:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	d0 e0       	ldi	r29, 0x00	; 0
     a68:	09 c0       	rjmp	.+18     	; 0xa7c <jumpingFour+0xce>
		sendData(pgm_read_byte(&Rex[1][j]) >> 4);
     a6a:	fe 01       	movw	r30, r28
     a6c:	eb 57       	subi	r30, 0x7B	; 123
     a6e:	fe 4f       	sbci	r31, 0xFE	; 254
     a70:	84 91       	lpm	r24, Z
     a72:	82 95       	swap	r24
     a74:	8f 70       	andi	r24, 0x0F	; 15
     a76:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x05);
	sendData(0x01);
	
	position(8,bottom);
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     a7a:	21 96       	adiw	r28, 0x01	; 1
     a7c:	cf 30       	cpi	r28, 0x0F	; 15
     a7e:	d1 05       	cpc	r29, r1
     a80:	a4 f3       	brlt	.-24     	; 0xa6a <jumpingFour+0xbc>
		sendData(pgm_read_byte(&Rex[1][j]) >> 4);
	}
}
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <jumpingFive>:

// Fifth frame of the jumping animation
void jumpingFive(unsigned char top, unsigned char middle, unsigned char bottom) {
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	06 2f       	mov	r16, r22
     a96:	14 2f       	mov	r17, r20
	position(8,top);
     a98:	68 2f       	mov	r22, r24
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 9; i++) {
     aa0:	c0 e0       	ldi	r28, 0x00	; 0
     aa2:	d0 e0       	ldi	r29, 0x00	; 0
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <jumpingFive+0x22>
		sendData(0x00);
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
}

// Fifth frame of the jumping animation
void jumpingFive(unsigned char top, unsigned char middle, unsigned char bottom) {
	position(8,top);
	for (int i = 0; i < 9; i++) {
     aac:	21 96       	adiw	r28, 0x01	; 1
     aae:	c9 30       	cpi	r28, 0x09	; 9
     ab0:	d1 05       	cpc	r29, r1
     ab2:	cc f3       	brlt	.-14     	; 0xaa6 <jumpingFive+0x1a>
		sendData(0x00);
	}
	//position(17,top);
	//position(17,4);
	sendData(0xC0);
     ab4:	80 ec       	ldi	r24, 0xC0	; 192
     ab6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xE0);
     aba:	80 ee       	ldi	r24, 0xE0	; 224
     abc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xA0);
     ac0:	80 ea       	ldi	r24, 0xA0	; 160
     ac2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xE0);
     ac6:	80 ee       	ldi	r24, 0xE0	; 224
     ac8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xE0);
     acc:	80 ee       	ldi	r24, 0xE0	; 224
     ace:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     ad2:	80 ec       	ldi	r24, 0xC0	; 192
     ad4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,middle);
     ad8:	60 2f       	mov	r22, r16
     ada:	88 e0       	ldi	r24, 0x08	; 8
     adc:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,5);
	sendData(0x1F);
     ae0:	8f e1       	ldi	r24, 0x1F	; 31
     ae2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x3E);
     ae6:	8e e3       	ldi	r24, 0x3E	; 62
     ae8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x3C);
     aec:	8c e3       	ldi	r24, 0x3C	; 60
     aee:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x78);
     af2:	88 e7       	ldi	r24, 0x78	; 120
     af4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF8);
     af8:	88 ef       	ldi	r24, 0xF8	; 248
     afa:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFC);
     afe:	8c ef       	ldi	r24, 0xFC	; 252
     b00:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFE);
     b04:	8e ef       	ldi	r24, 0xFE	; 254
     b06:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x7E);
     b0a:	8e e7       	ldi	r24, 0x7E	; 126
     b0c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x3F);
     b1c:	8f e3       	ldi	r24, 0x3F	; 63
     b1e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0B);
     b22:	8b e0       	ldi	r24, 0x0B	; 11
     b24:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1A);
     b28:	8a e1       	ldi	r24, 0x1A	; 26
     b2a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x02);
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,bottom);
     b3a:	61 2f       	mov	r22, r17
     b3c:	88 e0       	ldi	r24, 0x08	; 8
     b3e:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     b42:	c0 e0       	ldi	r28, 0x00	; 0
     b44:	d0 e0       	ldi	r29, 0x00	; 0
     b46:	0a c0       	rjmp	.+20     	; 0xb5c <jumpingFive+0xd0>
		sendData(pgm_read_byte(&Rex[1][j]) >> 5);
     b48:	fe 01       	movw	r30, r28
     b4a:	eb 57       	subi	r30, 0x7B	; 123
     b4c:	fe 4f       	sbci	r31, 0xFE	; 254
     b4e:	84 91       	lpm	r24, Z
     b50:	82 95       	swap	r24
     b52:	86 95       	lsr	r24
     b54:	87 70       	andi	r24, 0x07	; 7
     b56:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x02);
	sendData(0x00);
	
	position(8,bottom);
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     b5a:	21 96       	adiw	r28, 0x01	; 1
     b5c:	cf 30       	cpi	r28, 0x0F	; 15
     b5e:	d1 05       	cpc	r29, r1
     b60:	9c f3       	brlt	.-26     	; 0xb48 <jumpingFive+0xbc>
		sendData(pgm_read_byte(&Rex[1][j]) >> 5);
	}
}
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	08 95       	ret

00000b6c <jumpingSix>:

// Sixth frame of the jumping animation
void jumpingSix(unsigned char top, unsigned char middle, unsigned char bottom) {
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	d6 2f       	mov	r29, r22
     b72:	c4 2f       	mov	r28, r20
	position(8,top);
     b74:	68 2f       	mov	r22, r24
     b76:	88 e0       	ldi	r24, 0x08	; 8
     b78:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,4);
	sendData(0x80);
     b7c:	80 e8       	ldi	r24, 0x80	; 128
     b7e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	//position(16,top);
	//position(16,4);
	sendData(0x80);
     bac:	80 e8       	ldi	r24, 0x80	; 128
     bae:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xE0);
     bb2:	80 ee       	ldi	r24, 0xE0	; 224
     bb4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF0);
     bb8:	80 ef       	ldi	r24, 0xF0	; 240
     bba:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xD0);
     bbe:	80 ed       	ldi	r24, 0xD0	; 208
     bc0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x70);
     bc4:	80 e7       	ldi	r24, 0x70	; 112
     bc6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x70);
     bca:	80 e7       	ldi	r24, 0x70	; 112
     bcc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x60);
     bd0:	80 e6       	ldi	r24, 0x60	; 96
     bd2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,middle);
     bd6:	6d 2f       	mov	r22, r29
     bd8:	88 e0       	ldi	r24, 0x08	; 8
     bda:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,5);
	sendData(0x0F);
     bde:	8f e0       	ldi	r24, 0x0F	; 15
     be0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     be4:	8f e1       	ldi	r24, 0x1F	; 31
     be6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1E);
     bea:	8e e1       	ldi	r24, 0x1E	; 30
     bec:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x3C);
     bf0:	8c e3       	ldi	r24, 0x3C	; 60
     bf2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFC);
     bf6:	8c ef       	ldi	r24, 0xFC	; 252
     bf8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFE);
     bfc:	8e ef       	ldi	r24, 0xFE	; 254
     bfe:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x7F);
     c02:	8f e7       	ldi	r24, 0x7F	; 127
     c04:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x3F);
     c08:	8f e3       	ldi	r24, 0x3F	; 63
     c0a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x7F);
     c0e:	8f e7       	ldi	r24, 0x7F	; 127
     c10:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     c1a:	8f e1       	ldi	r24, 0x1F	; 31
     c1c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x05);
     c20:	85 e0       	ldi	r24, 0x05	; 5
     c22:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0D);
     c26:	8d e0       	ldi	r24, 0x0D	; 13
     c28:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x01);
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,bottom);
     c38:	6c 2f       	mov	r22, r28
     c3a:	88 e0       	ldi	r24, 0x08	; 8
     c3c:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     c40:	c0 e0       	ldi	r28, 0x00	; 0
     c42:	d0 e0       	ldi	r29, 0x00	; 0
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <jumpingSix+0xf0>
		sendData(pgm_read_byte(&Rex[1][j]) >> 6);
     c46:	fe 01       	movw	r30, r28
     c48:	eb 57       	subi	r30, 0x7B	; 123
     c4a:	fe 4f       	sbci	r31, 0xFE	; 254
     c4c:	84 91       	lpm	r24, Z
     c4e:	82 95       	swap	r24
     c50:	86 95       	lsr	r24
     c52:	86 95       	lsr	r24
     c54:	83 70       	andi	r24, 0x03	; 3
     c56:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x01);
	sendData(0x00);
	
	position(8,bottom);
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     c5a:	21 96       	adiw	r28, 0x01	; 1
     c5c:	cf 30       	cpi	r28, 0x0F	; 15
     c5e:	d1 05       	cpc	r29, r1
     c60:	94 f3       	brlt	.-28     	; 0xc46 <jumpingSix+0xda>
		sendData(pgm_read_byte(&Rex[1][j]) >> 6);
	}
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <jumpingSeven>:

// Seventh frame of the jumping animation
void jumpingSeven(unsigned char top, unsigned char middle, unsigned char bottom) {
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	d6 2f       	mov	r29, r22
     c6e:	c4 2f       	mov	r28, r20
	position(8,top);
     c70:	68 2f       	mov	r22, r24
     c72:	88 e0       	ldi	r24, 0x08	; 8
     c74:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,4);
	sendData(0xC0);
     c78:	80 ec       	ldi	r24, 0xC0	; 192
     c7a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     c7e:	80 e8       	ldi	r24, 0x80	; 128
     c80:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	//position(14,top);
	//position(14,4);
	sendData(0x80);
     c9c:	80 e8       	ldi	r24, 0x80	; 128
     c9e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x80);
     ca2:	80 e8       	ldi	r24, 0x80	; 128
     ca4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xC0);
     ca8:	80 ec       	ldi	r24, 0xC0	; 192
     caa:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF0);
     cae:	80 ef       	ldi	r24, 0xF0	; 240
     cb0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xF8);
     cb4:	88 ef       	ldi	r24, 0xF8	; 248
     cb6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xE8);
     cba:	88 ee       	ldi	r24, 0xE8	; 232
     cbc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xB8);
     cc0:	88 eb       	ldi	r24, 0xB8	; 184
     cc2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xB8);
     cc6:	88 eb       	ldi	r24, 0xB8	; 184
     cc8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x30);
     ccc:	80 e3       	ldi	r24, 0x30	; 48
     cce:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,middle);
     cd2:	6d 2f       	mov	r22, r29
     cd4:	88 e0       	ldi	r24, 0x08	; 8
     cd6:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,5);
	sendData(0x07);
     cda:	87 e0       	ldi	r24, 0x07	; 7
     cdc:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     ce0:	8f e0       	ldi	r24, 0x0F	; 15
     ce2:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     ce6:	8f e0       	ldi	r24, 0x0F	; 15
     ce8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1E);
     cec:	8e e1       	ldi	r24, 0x1E	; 30
     cee:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFE);
     cf2:	8e ef       	ldi	r24, 0xFE	; 254
     cf4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x7F);
     cf8:	8f e7       	ldi	r24, 0x7F	; 127
     cfa:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x3F);
     cfe:	8f e3       	ldi	r24, 0x3F	; 63
     d00:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x1F);
     d04:	8f e1       	ldi	r24, 0x1F	; 31
     d06:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x3F);
     d0a:	8f e3       	ldi	r24, 0x3F	; 63
     d0c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0xFF);
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x0F);
     d16:	8f e0       	ldi	r24, 0x0F	; 15
     d18:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x02);
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x06);
     d22:	86 e0       	ldi	r24, 0x06	; 6
     d24:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	position(8,bottom);
     d34:	6c 2f       	mov	r22, r28
     d36:	88 e0       	ldi	r24, 0x08	; 8
     d38:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     d3c:	c0 e0       	ldi	r28, 0x00	; 0
     d3e:	d0 e0       	ldi	r29, 0x00	; 0
     d40:	0a c0       	rjmp	.+20     	; 0xd56 <jumpingSeven+0xee>
		sendData(pgm_read_byte(&Rex[1][j]) >> 7);
     d42:	fe 01       	movw	r30, r28
     d44:	eb 57       	subi	r30, 0x7B	; 123
     d46:	fe 4f       	sbci	r31, 0xFE	; 254
     d48:	84 91       	lpm	r24, Z
     d4a:	88 1f       	adc	r24, r24
     d4c:	88 27       	eor	r24, r24
     d4e:	88 1f       	adc	r24, r24
     d50:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	sendData(0x00);
	sendData(0x00);
	
	position(8,bottom);
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     d54:	21 96       	adiw	r28, 0x01	; 1
     d56:	cf 30       	cpi	r28, 0x0F	; 15
     d58:	d1 05       	cpc	r29, r1
     d5a:	9c f3       	brlt	.-26     	; 0xd42 <jumpingSeven+0xda>
		sendData(pgm_read_byte(&Rex[1][j]) >> 7);
	}
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <jumpingEight>:

// Eighth frame of the jumping animation
void jumpingEight(unsigned char top, unsigned char middle, unsigned char bottom) {
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	06 2f       	mov	r16, r22
     d6c:	14 2f       	mov	r17, r20
	position(8,top);
     d6e:	68 2f       	mov	r22, r24
     d70:	88 e0       	ldi	r24, 0x08	; 8
     d72:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,4);
	for (int j = 0; j < 15; j++) {
     d76:	c0 e0       	ldi	r28, 0x00	; 0
     d78:	d0 e0       	ldi	r29, 0x00	; 0
     d7a:	07 c0       	rjmp	.+14     	; 0xd8a <jumpingEight+0x28>
		sendData(pgm_read_byte(&Rex[0][j]));
     d7c:	fe 01       	movw	r30, r28
     d7e:	ea 58       	subi	r30, 0x8A	; 138
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	84 91       	lpm	r24, Z
     d84:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// Eighth frame of the jumping animation
void jumpingEight(unsigned char top, unsigned char middle, unsigned char bottom) {
	position(8,top);
	//position(8,4);
	for (int j = 0; j < 15; j++) {
     d88:	21 96       	adiw	r28, 0x01	; 1
     d8a:	cf 30       	cpi	r28, 0x0F	; 15
     d8c:	d1 05       	cpc	r29, r1
     d8e:	b4 f3       	brlt	.-20     	; 0xd7c <jumpingEight+0x1a>
		sendData(pgm_read_byte(&Rex[0][j]));
	}
	position(8,middle);
     d90:	60 2f       	mov	r22, r16
     d92:	88 e0       	ldi	r24, 0x08	; 8
     d94:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,5);
	for (int j = 0; j < 15; j++) {
     d98:	c0 e0       	ldi	r28, 0x00	; 0
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <jumpingEight+0x4a>
		sendData(pgm_read_byte(&Rex[1][j]));
     d9e:	fe 01       	movw	r30, r28
     da0:	eb 57       	subi	r30, 0x7B	; 123
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	84 91       	lpm	r24, Z
     da6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int j = 0; j < 15; j++) {
		sendData(pgm_read_byte(&Rex[0][j]));
	}
	position(8,middle);
	//position(8,5);
	for (int j = 0; j < 15; j++) {
     daa:	21 96       	adiw	r28, 0x01	; 1
     dac:	cf 30       	cpi	r28, 0x0F	; 15
     dae:	d1 05       	cpc	r29, r1
     db0:	b4 f3       	brlt	.-20     	; 0xd9e <jumpingEight+0x3c>
		sendData(pgm_read_byte(&Rex[1][j]));
	}
	
	
	position(8,bottom);
     db2:	61 2f       	mov	r22, r17
     db4:	88 e0       	ldi	r24, 0x08	; 8
     db6:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     dba:	c0 e0       	ldi	r28, 0x00	; 0
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <jumpingEight+0x6e>
		sendData(pgm_read_byte(&Rex[1][j]) >> 8);
     dc0:	fe 01       	movw	r30, r28
     dc2:	eb 57       	subi	r30, 0x7B	; 123
     dc4:	fe 4f       	sbci	r31, 0xFE	; 254
     dc6:	e4 91       	lpm	r30, Z
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	}
	
	
	position(8,bottom);
	//position(8,6);
	for (int j = 0; j < 15; j++) {
     dce:	21 96       	adiw	r28, 0x01	; 1
     dd0:	cf 30       	cpi	r28, 0x0F	; 15
     dd2:	d1 05       	cpc	r29, r1
     dd4:	ac f3       	brlt	.-22     	; 0xdc0 <jumpingEight+0x5e>
		sendData(pgm_read_byte(&Rex[1][j]) >> 8);
	}
	
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	08 95       	ret

00000de0 <fallingClear>:

// Clears the top of the head of the T-Rex when it is falling
void fallingClear(unsigned char page) {
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
	position(18,page);
     de4:	68 2f       	mov	r22, r24
     de6:	82 e1       	ldi	r24, 0x12	; 18
     de8:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 4; i++) {
     dec:	c0 e0       	ldi	r28, 0x00	; 0
     dee:	d0 e0       	ldi	r29, 0x00	; 0
     df0:	04 c0       	rjmp	.+8      	; 0xdfa <fallingClear+0x1a>
		sendData(0x00);
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
}

// Clears the top of the head of the T-Rex when it is falling
void fallingClear(unsigned char page) {
	position(18,page);
	for (int i = 0; i < 4; i++) {
     df8:	21 96       	adiw	r28, 0x01	; 1
     dfa:	c4 30       	cpi	r28, 0x04	; 4
     dfc:	d1 05       	cpc	r29, r1
     dfe:	cc f3       	brlt	.-14     	; 0xdf2 <fallingClear+0x12>
		sendData(0x00);
	}
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <preventScrollBack>:
	activeCounter(); // Increments any active objects
	generateRandomEnemy(); // Generates a random enemy every 128 shifts
}

// Clears the first eight columns of the 5th and 6th page
void preventScrollBack() {
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
	position(0,5);
     e0a:	65 e0       	ldi	r22, 0x05	; 5
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 8; i++) {
     e12:	c0 e0       	ldi	r28, 0x00	; 0
     e14:	d0 e0       	ldi	r29, 0x00	; 0
     e16:	04 c0       	rjmp	.+8      	; 0xe20 <preventScrollBack+0x1a>
		sendData(0x00);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
}

// Clears the first eight columns of the 5th and 6th page
void preventScrollBack() {
	position(0,5);
	for (int i = 0; i < 8; i++) {
     e1e:	21 96       	adiw	r28, 0x01	; 1
     e20:	c8 30       	cpi	r28, 0x08	; 8
     e22:	d1 05       	cpc	r29, r1
     e24:	cc f3       	brlt	.-14     	; 0xe18 <preventScrollBack+0x12>
		sendData(0x00);
	}
	position(0,6);
     e26:	66 e0       	ldi	r22, 0x06	; 6
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 8; i++) {
     e2e:	c0 e0       	ldi	r28, 0x00	; 0
     e30:	d0 e0       	ldi	r29, 0x00	; 0
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <preventScrollBack+0x36>
		sendData(0x00);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	position(0,5);
	for (int i = 0; i < 8; i++) {
		sendData(0x00);
	}
	position(0,6);
	for (int i = 0; i < 8; i++) {
     e3a:	21 96       	adiw	r28, 0x01	; 1
     e3c:	c8 30       	cpi	r28, 0x08	; 8
     e3e:	d1 05       	cpc	r29, r1
     e40:	cc f3       	brlt	.-14     	; 0xe34 <preventScrollBack+0x2e>
		sendData(0x00);
	}
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <drawPterodactyl>:

// Displays a pterodactyl on the screen
void drawPterodactyl() {
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
	// Sends all the bytes required for a pterodactyl
	position(115,5);
     e4c:	65 e0       	ldi	r22, 0x05	; 5
     e4e:	83 e7       	ldi	r24, 0x73	; 115
     e50:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int j = 0; j < 11; j++) {
     e54:	c0 e0       	ldi	r28, 0x00	; 0
     e56:	d0 e0       	ldi	r29, 0x00	; 0
     e58:	07 c0       	rjmp	.+14     	; 0xe68 <drawPterodactyl+0x20>
		sendData(pgm_read_byte(&Pterodactyl[j]));
     e5a:	fe 01       	movw	r30, r28
     e5c:	e1 5a       	subi	r30, 0xA1	; 161
     e5e:	fe 4f       	sbci	r31, 0xFE	; 254
     e60:	84 91       	lpm	r24, Z
     e62:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// Displays a pterodactyl on the screen
void drawPterodactyl() {
	// Sends all the bytes required for a pterodactyl
	position(115,5);
	for (int j = 0; j < 11; j++) {
     e66:	21 96       	adiw	r28, 0x01	; 1
     e68:	cb 30       	cpi	r28, 0x0B	; 11
     e6a:	d1 05       	cpc	r29, r1
     e6c:	b4 f3       	brlt	.-20     	; 0xe5a <drawPterodactyl+0x12>
		sendData(pgm_read_byte(&Pterodactyl[j]));
	}
}
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	08 95       	ret

00000e74 <drawCactus>:

// Displays a cactus on the screen
void drawCactus() {
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
	// Sends all the bytes required for a cactus
	position(121,5);
     e78:	65 e0       	ldi	r22, 0x05	; 5
     e7a:	89 e7       	ldi	r24, 0x79	; 121
     e7c:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int j = 0; j < 6; j++) {
     e80:	c0 e0       	ldi	r28, 0x00	; 0
     e82:	d0 e0       	ldi	r29, 0x00	; 0
     e84:	07 c0       	rjmp	.+14     	; 0xe94 <drawCactus+0x20>
		sendData(pgm_read_byte(&Cactus[0][j]));
     e86:	fe 01       	movw	r30, r28
     e88:	e6 59       	subi	r30, 0x96	; 150
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	84 91       	lpm	r24, Z
     e8e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// Displays a cactus on the screen
void drawCactus() {
	// Sends all the bytes required for a cactus
	position(121,5);
	for (int j = 0; j < 6; j++) {
     e92:	21 96       	adiw	r28, 0x01	; 1
     e94:	c6 30       	cpi	r28, 0x06	; 6
     e96:	d1 05       	cpc	r29, r1
     e98:	b4 f3       	brlt	.-20     	; 0xe86 <drawCactus+0x12>
		sendData(pgm_read_byte(&Cactus[0][j]));
	}
	position(121,6);
     e9a:	66 e0       	ldi	r22, 0x06	; 6
     e9c:	89 e7       	ldi	r24, 0x79	; 121
     e9e:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int j = 0; j < 6; j++) {
     ea2:	c0 e0       	ldi	r28, 0x00	; 0
     ea4:	d0 e0       	ldi	r29, 0x00	; 0
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <drawCactus+0x42>
		sendData(pgm_read_byte(&Cactus[1][j]));
     ea8:	fe 01       	movw	r30, r28
     eaa:	e0 59       	subi	r30, 0x90	; 144
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	84 91       	lpm	r24, Z
     eb0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	position(121,5);
	for (int j = 0; j < 6; j++) {
		sendData(pgm_read_byte(&Cactus[0][j]));
	}
	position(121,6);
	for (int j = 0; j < 6; j++) {
     eb4:	21 96       	adiw	r28, 0x01	; 1
     eb6:	c6 30       	cpi	r28, 0x06	; 6
     eb8:	d1 05       	cpc	r29, r1
     eba:	b4 f3       	brlt	.-20     	; 0xea8 <drawCactus+0x34>
		sendData(pgm_read_byte(&Cactus[1][j]));
	}
}
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <generateRandomEnemy>:
	}
}

// Generates a random cactus or pterodactyl every 128 shifts
void generateRandomEnemy() {
	scrollCount++; // Increments every time the screen is shifted left
     ec2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <scrollCount>
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <scrollCount>
	if (scrollCount == 128) {
     ecc:	80 38       	cpi	r24, 0x80	; 128
     ece:	31 f5       	brne	.+76     	; 0xf1c <generateRandomEnemy+0x5a>
		int random_num = rand() % 2;
     ed0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <rand>
     ed4:	81 70       	andi	r24, 0x01	; 1
     ed6:	90 78       	andi	r25, 0x80	; 128
     ed8:	99 23       	and	r25, r25
     eda:	24 f4       	brge	.+8      	; 0xee4 <generateRandomEnemy+0x22>
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	8e 6f       	ori	r24, 0xFE	; 254
     ee0:	9f 6f       	ori	r25, 0xFF	; 255
     ee2:	01 96       	adiw	r24, 0x01	; 1
		double scaled_num = random_num + 1; // Generates a random number either 1 or 2
     ee4:	bc 01       	movw	r22, r24
     ee6:	6f 5f       	subi	r22, 0xFF	; 255
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	07 2e       	mov	r0, r23
     eec:	00 0c       	add	r0, r0
     eee:	88 0b       	sbc	r24, r24
     ef0:	99 0b       	sbc	r25, r25
     ef2:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__floatsisf>
		// If random number is 1 draw a cactus on the screen and make it active
		if (scaled_num == 1) {
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	5f e3       	ldi	r21, 0x3F	; 63
     efe:	0e 94 98 10 	call	0x2130	; 0x2130 <__cmpsf2>
     f02:	81 11       	cpse	r24, r1
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <generateRandomEnemy+0x4e>
			drawCactus();
     f06:	0e 94 3a 07 	call	0xe74	; 0xe74 <drawCactus>
			checkCactus();
     f0a:	0e 94 0a 01 	call	0x214	; 0x214 <checkCactus>
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <generateRandomEnemy+0x56>
		}
		// If random number is 2 draw a pterodactyl on the screen and make it active
		else {
			drawPterodactyl();
     f10:	0e 94 24 07 	call	0xe48	; 0xe48 <drawPterodactyl>
			checkPterodactyl();
     f14:	0e 94 1a 01 	call	0x234	; 0x234 <checkPterodactyl>
		}
		scrollCount = 0;
     f18:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <scrollCount>
     f1c:	08 95       	ret

00000f1e <drawRex>:
		sendData(pgm_read_byte(&Cactus[1][j]));
	}
}

// Displays a T-Rex on the screen
void drawRex() {
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
	// Sends all the bytes required for a T-Rex
	position(8,5);
     f22:	65 e0       	ldi	r22, 0x05	; 5
     f24:	88 e0       	ldi	r24, 0x08	; 8
     f26:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int j = 0; j < 15; j++) {
     f2a:	c0 e0       	ldi	r28, 0x00	; 0
     f2c:	d0 e0       	ldi	r29, 0x00	; 0
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <drawRex+0x20>
		sendData(pgm_read_byte(&Rex[0][j]));
     f30:	fe 01       	movw	r30, r28
     f32:	ea 58       	subi	r30, 0x8A	; 138
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	84 91       	lpm	r24, Z
     f38:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// Displays a T-Rex on the screen
void drawRex() {
	// Sends all the bytes required for a T-Rex
	position(8,5);
	for (int j = 0; j < 15; j++) {
     f3c:	21 96       	adiw	r28, 0x01	; 1
     f3e:	cf 30       	cpi	r28, 0x0F	; 15
     f40:	d1 05       	cpc	r29, r1
     f42:	b4 f3       	brlt	.-20     	; 0xf30 <drawRex+0x12>
		sendData(pgm_read_byte(&Rex[0][j]));
	}
	position(8,6);
     f44:	66 e0       	ldi	r22, 0x06	; 6
     f46:	88 e0       	ldi	r24, 0x08	; 8
     f48:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int j = 0; j < 15; j++) {
     f4c:	c0 e0       	ldi	r28, 0x00	; 0
     f4e:	d0 e0       	ldi	r29, 0x00	; 0
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <drawRex+0x42>
		sendData(pgm_read_byte(&Rex[1][j]));
     f52:	fe 01       	movw	r30, r28
     f54:	eb 57       	subi	r30, 0x7B	; 123
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	84 91       	lpm	r24, Z
     f5a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	position(8,5);
	for (int j = 0; j < 15; j++) {
		sendData(pgm_read_byte(&Rex[0][j]));
	}
	position(8,6);
	for (int j = 0; j < 15; j++) {
     f5e:	21 96       	adiw	r28, 0x01	; 1
     f60:	cf 30       	cpi	r28, 0x0F	; 15
     f62:	d1 05       	cpc	r29, r1
     f64:	b4 f3       	brlt	.-20     	; 0xf52 <drawRex+0x34>
		sendData(pgm_read_byte(&Rex[1][j]));
	}
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <unduckingRex>:
}

// Animation to return T-Rex back to original state
// Calls ducking animation backward with additional clearing
void unduckingRex() {
	position(25,6);
     f6c:	66 e0       	ldi	r22, 0x06	; 6
     f6e:	89 e1       	ldi	r24, 0x19	; 25
     f70:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x00);
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	duckingThree();
     f7a:	0e 94 18 03 	call	0x630	; 0x630 <duckingThree>
	_delay_10ms();
     f7e:	0e 94 3e 01 	call	0x27c	; 0x27c <_delay_10ms>
	position(24,5);
     f82:	65 e0       	ldi	r22, 0x05	; 5
     f84:	88 e1       	ldi	r24, 0x18	; 24
     f86:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x00);
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	position(24,6);
     f90:	66 e0       	ldi	r22, 0x06	; 6
     f92:	88 e1       	ldi	r24, 0x18	; 24
     f94:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x00);
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	duckingTwo();
     f9e:	0e 94 ac 02 	call	0x558	; 0x558 <duckingTwo>
	_delay_10ms();
     fa2:	0e 94 3e 01 	call	0x27c	; 0x27c <_delay_10ms>
	position(23,5);
     fa6:	65 e0       	ldi	r22, 0x05	; 5
     fa8:	87 e1       	ldi	r24, 0x17	; 23
     faa:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x00);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	duckingOne();
     fb4:	0e 94 46 02 	call	0x48c	; 0x48c <duckingOne>
	_delay_10ms();
     fb8:	0e 94 3e 01 	call	0x27c	; 0x27c <_delay_10ms>
	position(22,5);
     fbc:	65 e0       	ldi	r22, 0x05	; 5
     fbe:	86 e1       	ldi	r24, 0x16	; 22
     fc0:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x00);
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	rexMode = 0;
     fca:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rexMode>
	drawRex();
     fce:	0e 94 8f 07 	call	0xf1e	; 0xf1e <drawRex>
     fd2:	08 95       	ret

00000fd4 <background>:
		sendData(pgm_read_byte(&Rex[1][j]));
	}
}

// Displays the background / floor on the screen
void background() {
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
	position(0,7);
     fd8:	67 e0       	ldi	r22, 0x07	; 7
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// Pattern for background repeated 16 times to fill the entirety of the 7th page
	for (int i = 0; i < 16; i++) {
     fe0:	c0 e0       	ldi	r28, 0x00	; 0
     fe2:	d0 e0       	ldi	r29, 0x00	; 0
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <background+0x44>
		sendData(0xFE);
     fe6:	8e ef       	ldi	r24, 0xFE	; 254
     fe8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(0xFD);
     fec:	8d ef       	ldi	r24, 0xFD	; 253
     fee:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(0xF7);
     ff2:	87 ef       	ldi	r24, 0xF7	; 247
     ff4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(0xBF);
     ff8:	8f eb       	ldi	r24, 0xBF	; 191
     ffa:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(0xEF);
     ffe:	8f ee       	ldi	r24, 0xEF	; 239
    1000:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(0xFB);
    1004:	8b ef       	ldi	r24, 0xFB	; 251
    1006:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(0x7F);
    100a:	8f e7       	ldi	r24, 0x7F	; 127
    100c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(0xDF);
    1010:	8f ed       	ldi	r24, 0xDF	; 223
    1012:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// Displays the background / floor on the screen
void background() {
	position(0,7);
	// Pattern for background repeated 16 times to fill the entirety of the 7th page
	for (int i = 0; i < 16; i++) {
    1016:	21 96       	adiw	r28, 0x01	; 1
    1018:	c0 31       	cpi	r28, 0x10	; 16
    101a:	d1 05       	cpc	r29, r1
    101c:	24 f3       	brlt	.-56     	; 0xfe6 <background+0x12>
		sendData(0xEF);
		sendData(0xFB);
		sendData(0x7F);
		sendData(0xDF);
	}	
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <displayFinalScore>:
	letterDisplay(120, 4); // T
	
}

// Displays the final score the middle right of the screen when the game has ended
void displayFinalScore() {
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
	position(64,3);
    1038:	63 e0       	ldi	r22, 0x03	; 3
    103a:	80 e4       	ldi	r24, 0x40	; 64
    103c:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// S
	for (int i = 0; i < 5; i++) {
    1040:	c0 e0       	ldi	r28, 0x00	; 0
    1042:	d0 e0       	ldi	r29, 0x00	; 0
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <displayFinalScore+0x30>
		sendData(pgm_read_byte(&scoreLetters[0][i]));
    1046:	fe 01       	movw	r30, r28
    1048:	e0 57       	subi	r30, 0x70	; 112
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	84 91       	lpm	r24, Z
    104e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// Displays the final score the middle right of the screen when the game has ended
void displayFinalScore() {
	position(64,3);
	// S
	for (int i = 0; i < 5; i++) {
    1052:	21 96       	adiw	r28, 0x01	; 1
    1054:	c5 30       	cpi	r28, 0x05	; 5
    1056:	d1 05       	cpc	r29, r1
    1058:	b4 f3       	brlt	.-20     	; 0x1046 <displayFinalScore+0x22>
		sendData(pgm_read_byte(&scoreLetters[0][i]));
	}
	position(71,3);
    105a:	63 e0       	ldi	r22, 0x03	; 3
    105c:	87 e4       	ldi	r24, 0x47	; 71
    105e:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// C
	for (int i = 0; i < 5; i++) {
    1062:	c0 e0       	ldi	r28, 0x00	; 0
    1064:	d0 e0       	ldi	r29, 0x00	; 0
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <displayFinalScore+0x52>
		sendData(pgm_read_byte(&scoreLetters[1][i]));
    1068:	fe 01       	movw	r30, r28
    106a:	eb 56       	subi	r30, 0x6B	; 107
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	84 91       	lpm	r24, Z
    1070:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int i = 0; i < 5; i++) {
		sendData(pgm_read_byte(&scoreLetters[0][i]));
	}
	position(71,3);
	// C
	for (int i = 0; i < 5; i++) {
    1074:	21 96       	adiw	r28, 0x01	; 1
    1076:	c5 30       	cpi	r28, 0x05	; 5
    1078:	d1 05       	cpc	r29, r1
    107a:	b4 f3       	brlt	.-20     	; 0x1068 <displayFinalScore+0x44>
		sendData(pgm_read_byte(&scoreLetters[1][i]));
	}
	position(78,3);
    107c:	63 e0       	ldi	r22, 0x03	; 3
    107e:	8e e4       	ldi	r24, 0x4E	; 78
    1080:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// O
	for (int i = 0; i < 5; i++) {
    1084:	c0 e0       	ldi	r28, 0x00	; 0
    1086:	d0 e0       	ldi	r29, 0x00	; 0
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <displayFinalScore+0x74>
		sendData(pgm_read_byte(&scoreLetters[2][i]));
    108a:	fe 01       	movw	r30, r28
    108c:	e6 56       	subi	r30, 0x66	; 102
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	84 91       	lpm	r24, Z
    1092:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int i = 0; i < 5; i++) {
		sendData(pgm_read_byte(&scoreLetters[1][i]));
	}
	position(78,3);
	// O
	for (int i = 0; i < 5; i++) {
    1096:	21 96       	adiw	r28, 0x01	; 1
    1098:	c5 30       	cpi	r28, 0x05	; 5
    109a:	d1 05       	cpc	r29, r1
    109c:	b4 f3       	brlt	.-20     	; 0x108a <displayFinalScore+0x66>
		sendData(pgm_read_byte(&scoreLetters[2][i]));
	}
	position(85,3);
    109e:	63 e0       	ldi	r22, 0x03	; 3
    10a0:	85 e5       	ldi	r24, 0x55	; 85
    10a2:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// R
	for (int i = 0; i < 5; i++) {
    10a6:	c0 e0       	ldi	r28, 0x00	; 0
    10a8:	d0 e0       	ldi	r29, 0x00	; 0
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <displayFinalScore+0x96>
		sendData(pgm_read_byte(&scoreLetters[3][i]));
    10ac:	fe 01       	movw	r30, r28
    10ae:	e1 56       	subi	r30, 0x61	; 97
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	84 91       	lpm	r24, Z
    10b4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int i = 0; i < 5; i++) {
		sendData(pgm_read_byte(&scoreLetters[2][i]));
	}
	position(85,3);
	// R
	for (int i = 0; i < 5; i++) {
    10b8:	21 96       	adiw	r28, 0x01	; 1
    10ba:	c5 30       	cpi	r28, 0x05	; 5
    10bc:	d1 05       	cpc	r29, r1
    10be:	b4 f3       	brlt	.-20     	; 0x10ac <displayFinalScore+0x88>
		sendData(pgm_read_byte(&scoreLetters[3][i]));
	}
	position(92,3);
    10c0:	63 e0       	ldi	r22, 0x03	; 3
    10c2:	8c e5       	ldi	r24, 0x5C	; 92
    10c4:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// E
	for (int i = 0; i < 5; i++) {
    10c8:	c0 e0       	ldi	r28, 0x00	; 0
    10ca:	d0 e0       	ldi	r29, 0x00	; 0
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <displayFinalScore+0xb8>
		sendData(pgm_read_byte(&scoreLetters[4][i]));
    10ce:	fe 01       	movw	r30, r28
    10d0:	ec 55       	subi	r30, 0x5C	; 92
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	84 91       	lpm	r24, Z
    10d6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int i = 0; i < 5; i++) {
		sendData(pgm_read_byte(&scoreLetters[3][i]));
	}
	position(92,3);
	// E
	for (int i = 0; i < 5; i++) {
    10da:	21 96       	adiw	r28, 0x01	; 1
    10dc:	c5 30       	cpi	r28, 0x05	; 5
    10de:	d1 05       	cpc	r29, r1
    10e0:	b4 f3       	brlt	.-20     	; 0x10ce <displayFinalScore+0xaa>
		sendData(pgm_read_byte(&scoreLetters[4][i]));
	}
	
	position(99,3);
    10e2:	63 e0       	ldi	r22, 0x03	; 3
    10e4:	83 e6       	ldi	r24, 0x63	; 99
    10e6:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x24); //colon
    10ea:	84 e2       	ldi	r24, 0x24	; 36
    10ec:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	
	int thousands = (int)score / 1000;
    10f0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <score>
    10f4:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <score+0x1>
    10f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <score+0x2>
    10fc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <score+0x3>
    1100:	0e 94 9d 10 	call	0x213a	; 0x213a <__fixsfsi>
    1104:	cb 01       	movw	r24, r22
    1106:	68 ee       	ldi	r22, 0xE8	; 232
    1108:	73 e0       	ldi	r23, 0x03	; 3
    110a:	0e 94 85 11 	call	0x230a	; 0x230a <__divmodhi4>
    110e:	5b 01       	movw	r10, r22
	int temp = (int)score % 1000;
	int hundreds = temp / 100;
    1110:	64 e6       	ldi	r22, 0x64	; 100
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	0e 94 85 11 	call	0x230a	; 0x230a <__divmodhi4>
    1118:	6b 01       	movw	r12, r22
	temp = temp % 100;
	int tens = temp / 10;
	temp = temp % 10;
    111a:	6a e0       	ldi	r22, 0x0A	; 10
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	0e 94 85 11 	call	0x230a	; 0x230a <__divmodhi4>
    1122:	7b 01       	movw	r14, r22
    1124:	ec 01       	movw	r28, r24
	int ones = temp;
	
	position(102,3);
    1126:	63 e0       	ldi	r22, 0x03	; 3
    1128:	86 e6       	ldi	r24, 0x66	; 102
    112a:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// Thousands number of the score
	for (int i = 0; i < 4; i++) {
    112e:	00 e0       	ldi	r16, 0x00	; 0
    1130:	10 e0       	ldi	r17, 0x00	; 0
    1132:	0e c0       	rjmp	.+28     	; 0x1150 <displayFinalScore+0x12c>
		sendData(pgm_read_byte(&numbers[thousands][i]));
    1134:	f5 01       	movw	r30, r10
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	e0 0f       	add	r30, r16
    1140:	f1 1f       	adc	r31, r17
    1142:	e8 59       	subi	r30, 0x98	; 152
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	84 91       	lpm	r24, Z
    1148:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	temp = temp % 10;
	int ones = temp;
	
	position(102,3);
	// Thousands number of the score
	for (int i = 0; i < 4; i++) {
    114c:	0f 5f       	subi	r16, 0xFF	; 255
    114e:	1f 4f       	sbci	r17, 0xFF	; 255
    1150:	04 30       	cpi	r16, 0x04	; 4
    1152:	11 05       	cpc	r17, r1
    1154:	7c f3       	brlt	.-34     	; 0x1134 <displayFinalScore+0x110>
		sendData(pgm_read_byte(&numbers[thousands][i]));
	}
	
	position(108,3);
    1156:	63 e0       	ldi	r22, 0x03	; 3
    1158:	8c e6       	ldi	r24, 0x6C	; 108
    115a:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// Hundreds number of the score
	for (int i = 0; i < 4; i++) {
    115e:	00 e0       	ldi	r16, 0x00	; 0
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <displayFinalScore+0x15c>
		sendData(pgm_read_byte(&numbers[hundreds][i]));
    1164:	f6 01       	movw	r30, r12
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	e0 0f       	add	r30, r16
    1170:	f1 1f       	adc	r31, r17
    1172:	e8 59       	subi	r30, 0x98	; 152
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	84 91       	lpm	r24, Z
    1178:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(pgm_read_byte(&numbers[thousands][i]));
	}
	
	position(108,3);
	// Hundreds number of the score
	for (int i = 0; i < 4; i++) {
    117c:	0f 5f       	subi	r16, 0xFF	; 255
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	04 30       	cpi	r16, 0x04	; 4
    1182:	11 05       	cpc	r17, r1
    1184:	7c f3       	brlt	.-34     	; 0x1164 <displayFinalScore+0x140>
		sendData(pgm_read_byte(&numbers[hundreds][i]));
	}
	
	position(114,3);
    1186:	63 e0       	ldi	r22, 0x03	; 3
    1188:	82 e7       	ldi	r24, 0x72	; 114
    118a:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// Tens number of the score
	for (int i = 0; i < 4; i++) {
    118e:	00 e0       	ldi	r16, 0x00	; 0
    1190:	10 e0       	ldi	r17, 0x00	; 0
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <displayFinalScore+0x18c>
		sendData(pgm_read_byte(&numbers[tens][i]));
    1194:	f7 01       	movw	r30, r14
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	e0 0f       	add	r30, r16
    11a0:	f1 1f       	adc	r31, r17
    11a2:	e8 59       	subi	r30, 0x98	; 152
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	84 91       	lpm	r24, Z
    11a8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(pgm_read_byte(&numbers[hundreds][i]));
	}
	
	position(114,3);
	// Tens number of the score
	for (int i = 0; i < 4; i++) {
    11ac:	0f 5f       	subi	r16, 0xFF	; 255
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	04 30       	cpi	r16, 0x04	; 4
    11b2:	11 05       	cpc	r17, r1
    11b4:	7c f3       	brlt	.-34     	; 0x1194 <displayFinalScore+0x170>
		sendData(pgm_read_byte(&numbers[tens][i]));
	}
	
	position(120,3);
    11b6:	63 e0       	ldi	r22, 0x03	; 3
    11b8:	88 e7       	ldi	r24, 0x78	; 120
    11ba:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// Ones number of the score
	for (int i = 0; i < 4; i++) {
    11be:	00 e0       	ldi	r16, 0x00	; 0
    11c0:	10 e0       	ldi	r17, 0x00	; 0
    11c2:	0e c0       	rjmp	.+28     	; 0x11e0 <displayFinalScore+0x1bc>
		sendData(pgm_read_byte(&numbers[ones][i]));
    11c4:	fe 01       	movw	r30, r28
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	e0 0f       	add	r30, r16
    11d0:	f1 1f       	adc	r31, r17
    11d2:	e8 59       	subi	r30, 0x98	; 152
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	84 91       	lpm	r24, Z
    11d8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
		sendData(pgm_read_byte(&numbers[tens][i]));
	}
	
	position(120,3);
	// Ones number of the score
	for (int i = 0; i < 4; i++) {
    11dc:	0f 5f       	subi	r16, 0xFF	; 255
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	04 30       	cpi	r16, 0x04	; 4
    11e2:	11 05       	cpc	r17, r1
    11e4:	7c f3       	brlt	.-34     	; 0x11c4 <displayFinalScore+0x1a0>
		sendData(pgm_read_byte(&numbers[ones][i]));
	}
	
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	bf 90       	pop	r11
    11f8:	af 90       	pop	r10
    11fa:	08 95       	ret

000011fc <displayNumber>:
	}
	
}

// Displays a number to the screen at a certain position
void displayNumber(int number, int x) {
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	8c 01       	movw	r16, r24
    1206:	86 2f       	mov	r24, r22
	position(x,0);
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 4; i++) {
    120e:	c0 e0       	ldi	r28, 0x00	; 0
    1210:	d0 e0       	ldi	r29, 0x00	; 0
    1212:	0d c0       	rjmp	.+26     	; 0x122e <displayNumber+0x32>
		sendData(pgm_read_byte(&numbers[number][i]));
    1214:	f8 01       	movw	r30, r16
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	ec 0f       	add	r30, r28
    1220:	fd 1f       	adc	r31, r29
    1222:	e8 59       	subi	r30, 0x98	; 152
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	84 91       	lpm	r24, Z
    1228:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
}

// Displays a number to the screen at a certain position
void displayNumber(int number, int x) {
	position(x,0);
	for (int i = 0; i < 4; i++) {
    122c:	21 96       	adiw	r28, 0x01	; 1
    122e:	c4 30       	cpi	r28, 0x04	; 4
    1230:	d1 05       	cpc	r29, r1
    1232:	84 f3       	brlt	.-32     	; 0x1214 <displayNumber+0x18>
		sendData(pgm_read_byte(&numbers[number][i]));
	}
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	08 95       	ret

0000123e <displayScore>:
	}
	
}

// Displays the current score to the screen
void displayScore() {
    123e:	6f 92       	push	r6
    1240:	7f 92       	push	r7
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
	// Grabs the current score from the score count
	// Extracts the Thousands, Hundreds, Tens, and Ones place
	int thousands = (int)score / 1000;
    125a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <score>
    125e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <score+0x1>
    1262:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <score+0x2>
    1266:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <score+0x3>
    126a:	0e 94 9d 10 	call	0x213a	; 0x213a <__fixsfsi>
    126e:	cb 01       	movw	r24, r22
    1270:	68 ee       	ldi	r22, 0xE8	; 232
    1272:	73 e0       	ldi	r23, 0x03	; 3
    1274:	0e 94 85 11 	call	0x230a	; 0x230a <__divmodhi4>
    1278:	4b 01       	movw	r8, r22
	int temp = (int)score % 1000;
	int hundreds = temp / 100;
    127a:	64 e6       	ldi	r22, 0x64	; 100
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	0e 94 85 11 	call	0x230a	; 0x230a <__divmodhi4>
    1282:	66 2e       	mov	r6, r22
    1284:	77 2e       	mov	r7, r23
    1286:	e6 2e       	mov	r14, r22
    1288:	f7 2e       	mov	r15, r23
	temp = temp % 100;
	int tens = temp / 10;
    128a:	6a e0       	ldi	r22, 0x0A	; 10
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	0e 94 85 11 	call	0x230a	; 0x230a <__divmodhi4>
    1292:	a6 2e       	mov	r10, r22
    1294:	b7 2e       	mov	r11, r23
    1296:	c8 2e       	mov	r12, r24
    1298:	d9 2e       	mov	r13, r25
    129a:	06 2f       	mov	r16, r22
    129c:	17 2f       	mov	r17, r23
	temp = temp % 10;
    129e:	c8 2f       	mov	r28, r24
    12a0:	d9 2f       	mov	r29, r25
	int ones = temp;
	
	// Displays any numbers that have changed to the screen
	if (lastThousands != thousands) {
    12a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
    12a6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
    12aa:	88 16       	cp	r8, r24
    12ac:	99 06       	cpc	r9, r25
    12ae:	49 f0       	breq	.+18     	; 0x12c2 <displayScore+0x84>
		displayNumber(thousands, 38);
    12b0:	66 e2       	ldi	r22, 0x26	; 38
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	c4 01       	movw	r24, r8
    12b6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <displayNumber>
		lastThousands = thousands;
    12ba:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <__data_end+0x1>
    12be:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <__data_end>
	}
	if (lastHundreds != hundreds) {
    12c2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lastHundreds>
    12c6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <lastHundreds+0x1>
    12ca:	e8 16       	cp	r14, r24
    12cc:	f9 06       	cpc	r15, r25
    12ce:	51 f0       	breq	.+20     	; 0x12e4 <displayScore+0xa6>
		displayNumber(hundreds, 44);
    12d0:	6c e2       	ldi	r22, 0x2C	; 44
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	86 2d       	mov	r24, r6
    12d6:	97 2d       	mov	r25, r7
    12d8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <displayNumber>
		lastHundreds = hundreds;
    12dc:	60 92 08 01 	sts	0x0108, r6	; 0x800108 <lastHundreds>
    12e0:	70 92 09 01 	sts	0x0109, r7	; 0x800109 <lastHundreds+0x1>
	}
	if (lastTens != tens) {
    12e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lastTens>
    12e8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lastTens+0x1>
    12ec:	08 17       	cp	r16, r24
    12ee:	19 07       	cpc	r17, r25
    12f0:	51 f0       	breq	.+20     	; 0x1306 <displayScore+0xc8>
		displayNumber(tens, 50);
    12f2:	62 e3       	ldi	r22, 0x32	; 50
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	8a 2d       	mov	r24, r10
    12f8:	9b 2d       	mov	r25, r11
    12fa:	0e 94 fe 08 	call	0x11fc	; 0x11fc <displayNumber>
		lastTens = tens;
    12fe:	a0 92 0a 01 	sts	0x010A, r10	; 0x80010a <lastTens>
    1302:	b0 92 0b 01 	sts	0x010B, r11	; 0x80010b <lastTens+0x1>
	}
	if (lastOnes != ones) {
    1306:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lastOnes>
    130a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lastOnes+0x1>
    130e:	c8 17       	cp	r28, r24
    1310:	d9 07       	cpc	r29, r25
    1312:	51 f0       	breq	.+20     	; 0x1328 <displayScore+0xea>
		displayNumber(ones, 56);
    1314:	68 e3       	ldi	r22, 0x38	; 56
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	8c 2d       	mov	r24, r12
    131a:	9d 2d       	mov	r25, r13
    131c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <displayNumber>
		lastOnes = ones;
    1320:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <lastOnes>
    1324:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <lastOnes+0x1>
	}
	
}
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	9f 90       	pop	r9
    133e:	8f 90       	pop	r8
    1340:	7f 90       	pop	r7
    1342:	6f 90       	pop	r6
    1344:	08 95       	ret

00001346 <resetCactus>:
	}
}

// Deactivates a cactus once it is cleared
void resetCactus() {
	if (cactusOne >= 119) {
    1346:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cactusOne>
    134a:	87 37       	cpi	r24, 0x77	; 119
    134c:	c8 f0       	brcs	.+50     	; 0x1380 <resetCactus+0x3a>
		cactusOne = 0;
    134e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cactusOne>
		score++;
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <score>
    135e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <score+0x1>
    1362:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <score+0x2>
    1366:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <score+0x3>
    136a:	0e 94 2c 10 	call	0x2058	; 0x2058 <__addsf3>
    136e:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <score>
    1372:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <score+0x1>
    1376:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <score+0x2>
    137a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <score+0x3>
    137e:	1c c0       	rjmp	.+56     	; 0x13b8 <resetCactus+0x72>
	}
	else if (cactusTwo >= 119) {
    1380:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cactusTwo>
    1384:	87 37       	cpi	r24, 0x77	; 119
    1386:	c0 f0       	brcs	.+48     	; 0x13b8 <resetCactus+0x72>
		cactusTwo = 0;
    1388:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cactusTwo>
		score++;
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e8       	ldi	r20, 0x80	; 128
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <score>
    1398:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <score+0x1>
    139c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <score+0x2>
    13a0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <score+0x3>
    13a4:	0e 94 2c 10 	call	0x2058	; 0x2058 <__addsf3>
    13a8:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <score>
    13ac:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <score+0x1>
    13b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <score+0x2>
    13b4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <score+0x3>
	}
	displayScore();
    13b8:	0e 94 1f 09 	call	0x123e	; 0x123e <displayScore>
    13bc:	08 95       	ret

000013be <resetPterodactyl>:
}

// Deactivates a pterodactyl once it is cleared
void resetPterodactyl() {
	if (pteroOne >= 119) {
    13be:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pteroOne>
    13c2:	87 37       	cpi	r24, 0x77	; 119
    13c4:	c8 f0       	brcs	.+50     	; 0x13f8 <resetPterodactyl+0x3a>
		pteroOne = 0;
    13c6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <pteroOne>
		score++;
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e8       	ldi	r20, 0x80	; 128
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <score>
    13d6:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <score+0x1>
    13da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <score+0x2>
    13de:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <score+0x3>
    13e2:	0e 94 2c 10 	call	0x2058	; 0x2058 <__addsf3>
    13e6:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <score>
    13ea:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <score+0x1>
    13ee:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <score+0x2>
    13f2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <score+0x3>
    13f6:	1c c0       	rjmp	.+56     	; 0x1430 <resetPterodactyl+0x72>
	}
	else if (pteroTwo >= 119) {
    13f8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pteroTwo>
    13fc:	87 37       	cpi	r24, 0x77	; 119
    13fe:	c0 f0       	brcs	.+48     	; 0x1430 <resetPterodactyl+0x72>
		pteroTwo = 0;
    1400:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pteroTwo>
		score++;
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e8       	ldi	r20, 0x80	; 128
    140a:	5f e3       	ldi	r21, 0x3F	; 63
    140c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <score>
    1410:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <score+0x1>
    1414:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <score+0x2>
    1418:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <score+0x3>
    141c:	0e 94 2c 10 	call	0x2058	; 0x2058 <__addsf3>
    1420:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <score>
    1424:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <score+0x1>
    1428:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <score+0x2>
    142c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <score+0x3>
	}
	displayScore();
    1430:	0e 94 1f 09 	call	0x123e	; 0x123e <displayScore>
    1434:	08 95       	ret

00001436 <scrollLeft>:

///////////////////////////////////////////////////////////////////////////////////////////////
// Shifts the screen one pixel to the left
void scrollLeft() {
	// Turns the scroll on the OLED on
	sendOneCommandByte(0x2E);
    1436:	8e e2       	ldi	r24, 0x2E	; 46
    1438:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0x27);
    143c:	87 e2       	ldi	r24, 0x27	; 39
    143e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0x00);
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0x05);
    1448:	85 e0       	ldi	r24, 0x05	; 5
    144a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0x00); // Change scroll rate 0x04, 0x07
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0x07);
    1454:	87 e0       	ldi	r24, 0x07	; 7
    1456:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0x00);
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0xFF);
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0x2F);
    1466:	8f e2       	ldi	r24, 0x2F	; 47
    1468:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    146c:	2f ef       	ldi	r18, 0xFF	; 255
    146e:	86 e7       	ldi	r24, 0x76	; 118
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	21 50       	subi	r18, 0x01	; 1
    1474:	80 40       	sbci	r24, 0x00	; 0
    1476:	90 40       	sbci	r25, 0x00	; 0
    1478:	e1 f7       	brne	.-8      	; 0x1472 <scrollLeft+0x3c>
    147a:	00 c0       	rjmp	.+0      	; 0x147c <scrollLeft+0x46>
    147c:	00 00       	nop
	
	_delay_ms(30);
	sendOneCommandByte(0x2E); // Turns the scroll off
    147e:	8e e2       	ldi	r24, 0x2E	; 46
    1480:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	
	resetCactus(); // Checks if the cactus has been cleared
    1484:	0e 94 a3 09 	call	0x1346	; 0x1346 <resetCactus>
	resetPterodactyl(); // Checks if the pterodactyl has been cleared
    1488:	0e 94 df 09 	call	0x13be	; 0x13be <resetPterodactyl>
	activeCounter(); // Increments any active objects
    148c:	0e 94 ed 00 	call	0x1da	; 0x1da <activeCounter>
	generateRandomEnemy(); // Generates a random enemy every 128 shifts
    1490:	0e 94 61 07 	call	0xec2	; 0xec2 <generateRandomEnemy>
    1494:	08 95       	ret

00001496 <jumpingRex>:
// Jumping and falling animation for the T-Rex
// Continues the scrolling of the screen while in animation
// Sets different mode for each frame it is in
// First Eighth frames are repeated until the T-Rex has gone up 3 pages where it start to fall
// Falling animation is done by calling the jumping animation backwards
void jumpingRex() {
    1496:	2f 92       	push	r2
    1498:	3f 92       	push	r3
    149a:	4f 92       	push	r4
    149c:	5f 92       	push	r5
    149e:	6f 92       	push	r6
    14a0:	7f 92       	push	r7
    14a2:	8f 92       	push	r8
    14a4:	9f 92       	push	r9
    14a6:	af 92       	push	r10
    14a8:	bf 92       	push	r11
    14aa:	cf 92       	push	r12
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
	
	jumpingOne(5,6);
    14ba:	66 e0       	ldi	r22, 0x06	; 6
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <jumpingOne>
	rexMode = 1;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    14c8:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    14cc:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    14d0:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingTwo(5,6);
    14d4:	66 e0       	ldi	r22, 0x06	; 6
    14d6:	85 e0       	ldi	r24, 0x05	; 5
    14d8:	0e 94 21 04 	call	0x842	; 0x842 <jumpingTwo>
	rexMode = 2;
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    14e2:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    14e6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    14ea:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingThree(4,5,6);
    14ee:	46 e0       	ldi	r20, 0x06	; 6
    14f0:	65 e0       	ldi	r22, 0x05	; 5
    14f2:	84 e0       	ldi	r24, 0x04	; 4
    14f4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <jumpingThree>
	rexMode = 3;
    14f8:	83 e0       	ldi	r24, 0x03	; 3
    14fa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    14fe:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1502:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1506:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFour(4,5,6);
    150a:	46 e0       	ldi	r20, 0x06	; 6
    150c:	65 e0       	ldi	r22, 0x05	; 5
    150e:	84 e0       	ldi	r24, 0x04	; 4
    1510:	0e 94 d7 04 	call	0x9ae	; 0x9ae <jumpingFour>
	rexMode = 4;
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    151a:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    151e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1522:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFive(4,5,6);
    1526:	46 e0       	ldi	r20, 0x06	; 6
    1528:	65 e0       	ldi	r22, 0x05	; 5
    152a:	84 e0       	ldi	r24, 0x04	; 4
    152c:	0e 94 46 05 	call	0xa8c	; 0xa8c <jumpingFive>
	rexMode = 5;
    1530:	85 e0       	ldi	r24, 0x05	; 5
    1532:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    1536:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    153a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    153e:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSix(4,5,6);
    1542:	46 e0       	ldi	r20, 0x06	; 6
    1544:	65 e0       	ldi	r22, 0x05	; 5
    1546:	84 e0       	ldi	r24, 0x04	; 4
    1548:	0e 94 b6 05 	call	0xb6c	; 0xb6c <jumpingSix>
	rexMode = 6;
    154c:	c6 e0       	ldi	r28, 0x06	; 6
    154e:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <rexMode>
	_delay_5ms();
    1552:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1556:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    155a:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSeven(4,5,6);
    155e:	46 e0       	ldi	r20, 0x06	; 6
    1560:	65 e0       	ldi	r22, 0x05	; 5
    1562:	84 e0       	ldi	r24, 0x04	; 4
    1564:	0e 94 34 06 	call	0xc68	; 0xc68 <jumpingSeven>
	rexMode = 7;
    1568:	d7 e0       	ldi	r29, 0x07	; 7
    156a:	d0 93 13 01 	sts	0x0113, r29	; 0x800113 <rexMode>
	_delay_5ms();
    156e:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1572:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1576:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingEight(4,5,6);
    157a:	46 e0       	ldi	r20, 0x06	; 6
    157c:	65 e0       	ldi	r22, 0x05	; 5
    157e:	84 e0       	ldi	r24, 0x04	; 4
    1580:	0e 94 b1 06 	call	0xd62	; 0xd62 <jumpingEight>
	rexMode = 8;
    1584:	18 e0       	ldi	r17, 0x08	; 8
    1586:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <rexMode>
	_delay_5ms();
    158a:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    158e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1592:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	
	jumpingOne(4,5);
    1596:	65 e0       	ldi	r22, 0x05	; 5
    1598:	84 e0       	ldi	r24, 0x04	; 4
    159a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <jumpingOne>
	rexMode = 9;
    159e:	09 e0       	ldi	r16, 0x09	; 9
    15a0:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <rexMode>
	_delay_5ms();
    15a4:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    15a8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    15ac:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingTwo(4,5);
    15b0:	65 e0       	ldi	r22, 0x05	; 5
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	0e 94 21 04 	call	0x842	; 0x842 <jumpingTwo>
	rexMode = 10;
    15b8:	0f 2e       	mov	r0, r31
    15ba:	fa e0       	ldi	r31, 0x0A	; 10
    15bc:	ff 2e       	mov	r15, r31
    15be:	f0 2d       	mov	r31, r0
    15c0:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <rexMode>
	_delay_5ms();
    15c4:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    15c8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    15cc:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingThree(3,4,5);
    15d0:	45 e0       	ldi	r20, 0x05	; 5
    15d2:	64 e0       	ldi	r22, 0x04	; 4
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <jumpingThree>
	rexMode = 11;
    15da:	0f 2e       	mov	r0, r31
    15dc:	fb e0       	ldi	r31, 0x0B	; 11
    15de:	ef 2e       	mov	r14, r31
    15e0:	f0 2d       	mov	r31, r0
    15e2:	e0 92 13 01 	sts	0x0113, r14	; 0x800113 <rexMode>
	_delay_5ms();
    15e6:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    15ea:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    15ee:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFour(3,4,5);
    15f2:	45 e0       	ldi	r20, 0x05	; 5
    15f4:	64 e0       	ldi	r22, 0x04	; 4
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <jumpingFour>
	rexMode = 12;
    15fc:	0f 2e       	mov	r0, r31
    15fe:	fc e0       	ldi	r31, 0x0C	; 12
    1600:	df 2e       	mov	r13, r31
    1602:	f0 2d       	mov	r31, r0
    1604:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <rexMode>
	_delay_5ms();
    1608:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    160c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1610:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFive(3,4,5);
    1614:	45 e0       	ldi	r20, 0x05	; 5
    1616:	64 e0       	ldi	r22, 0x04	; 4
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	0e 94 46 05 	call	0xa8c	; 0xa8c <jumpingFive>
	rexMode = 13;
    161e:	0f 2e       	mov	r0, r31
    1620:	fd e0       	ldi	r31, 0x0D	; 13
    1622:	cf 2e       	mov	r12, r31
    1624:	f0 2d       	mov	r31, r0
    1626:	c0 92 13 01 	sts	0x0113, r12	; 0x800113 <rexMode>
	_delay_5ms();
    162a:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    162e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1632:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSix(3,4,5);
    1636:	45 e0       	ldi	r20, 0x05	; 5
    1638:	64 e0       	ldi	r22, 0x04	; 4
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <jumpingSix>
	rexMode = 14;
    1640:	0f 2e       	mov	r0, r31
    1642:	fe e0       	ldi	r31, 0x0E	; 14
    1644:	bf 2e       	mov	r11, r31
    1646:	f0 2d       	mov	r31, r0
    1648:	b0 92 13 01 	sts	0x0113, r11	; 0x800113 <rexMode>
	_delay_5ms();
    164c:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1650:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1654:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSeven(3,4,5);
    1658:	45 e0       	ldi	r20, 0x05	; 5
    165a:	64 e0       	ldi	r22, 0x04	; 4
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	0e 94 34 06 	call	0xc68	; 0xc68 <jumpingSeven>
	rexMode = 15;
    1662:	0f 2e       	mov	r0, r31
    1664:	ff e0       	ldi	r31, 0x0F	; 15
    1666:	af 2e       	mov	r10, r31
    1668:	f0 2d       	mov	r31, r0
    166a:	a0 92 13 01 	sts	0x0113, r10	; 0x800113 <rexMode>
	_delay_5ms();
    166e:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1672:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1676:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingEight(3,4,5);
    167a:	45 e0       	ldi	r20, 0x05	; 5
    167c:	64 e0       	ldi	r22, 0x04	; 4
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	0e 94 b1 06 	call	0xd62	; 0xd62 <jumpingEight>
	rexMode = 16;
    1684:	68 94       	set
    1686:	99 24       	eor	r9, r9
    1688:	94 f8       	bld	r9, 4
    168a:	90 92 13 01 	sts	0x0113, r9	; 0x800113 <rexMode>
	_delay_5ms();
    168e:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1692:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1696:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	
	jumpingOne(3,4);
    169a:	64 e0       	ldi	r22, 0x04	; 4
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <jumpingOne>
	rexMode = 17;
    16a2:	0f 2e       	mov	r0, r31
    16a4:	f1 e1       	ldi	r31, 0x11	; 17
    16a6:	8f 2e       	mov	r8, r31
    16a8:	f0 2d       	mov	r31, r0
    16aa:	80 92 13 01 	sts	0x0113, r8	; 0x800113 <rexMode>
	_delay_5ms();
    16ae:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    16b2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    16b6:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingTwo(3,4);
    16ba:	64 e0       	ldi	r22, 0x04	; 4
    16bc:	83 e0       	ldi	r24, 0x03	; 3
    16be:	0e 94 21 04 	call	0x842	; 0x842 <jumpingTwo>
	rexMode = 18;
    16c2:	0f 2e       	mov	r0, r31
    16c4:	f2 e1       	ldi	r31, 0x12	; 18
    16c6:	7f 2e       	mov	r7, r31
    16c8:	f0 2d       	mov	r31, r0
    16ca:	70 92 13 01 	sts	0x0113, r7	; 0x800113 <rexMode>
	_delay_5ms();
    16ce:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    16d2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    16d6:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingThree(2,3,4);
    16da:	44 e0       	ldi	r20, 0x04	; 4
    16dc:	63 e0       	ldi	r22, 0x03	; 3
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <jumpingThree>
	rexMode = 19;
    16e4:	0f 2e       	mov	r0, r31
    16e6:	f3 e1       	ldi	r31, 0x13	; 19
    16e8:	6f 2e       	mov	r6, r31
    16ea:	f0 2d       	mov	r31, r0
    16ec:	60 92 13 01 	sts	0x0113, r6	; 0x800113 <rexMode>
	_delay_5ms();
    16f0:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    16f4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    16f8:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFour(2,3,4);
    16fc:	44 e0       	ldi	r20, 0x04	; 4
    16fe:	63 e0       	ldi	r22, 0x03	; 3
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	0e 94 d7 04 	call	0x9ae	; 0x9ae <jumpingFour>
	rexMode = 20;
    1706:	0f 2e       	mov	r0, r31
    1708:	f4 e1       	ldi	r31, 0x14	; 20
    170a:	5f 2e       	mov	r5, r31
    170c:	f0 2d       	mov	r31, r0
    170e:	50 92 13 01 	sts	0x0113, r5	; 0x800113 <rexMode>
	_delay_5ms();
    1712:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1716:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    171a:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFive(2,3,4);
    171e:	44 e0       	ldi	r20, 0x04	; 4
    1720:	63 e0       	ldi	r22, 0x03	; 3
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	0e 94 46 05 	call	0xa8c	; 0xa8c <jumpingFive>
	rexMode = 21;
    1728:	0f 2e       	mov	r0, r31
    172a:	f5 e1       	ldi	r31, 0x15	; 21
    172c:	4f 2e       	mov	r4, r31
    172e:	f0 2d       	mov	r31, r0
    1730:	40 92 13 01 	sts	0x0113, r4	; 0x800113 <rexMode>
	_delay_5ms();
    1734:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1738:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    173c:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSix(2,3,4);
    1740:	44 e0       	ldi	r20, 0x04	; 4
    1742:	63 e0       	ldi	r22, 0x03	; 3
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	0e 94 b6 05 	call	0xb6c	; 0xb6c <jumpingSix>
	rexMode = 22;
    174a:	0f 2e       	mov	r0, r31
    174c:	f6 e1       	ldi	r31, 0x16	; 22
    174e:	3f 2e       	mov	r3, r31
    1750:	f0 2d       	mov	r31, r0
    1752:	30 92 13 01 	sts	0x0113, r3	; 0x800113 <rexMode>
	_delay_5ms();
    1756:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    175a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    175e:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSeven(2,3,4);
    1762:	44 e0       	ldi	r20, 0x04	; 4
    1764:	63 e0       	ldi	r22, 0x03	; 3
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	0e 94 34 06 	call	0xc68	; 0xc68 <jumpingSeven>
	rexMode = 23;
    176c:	0f 2e       	mov	r0, r31
    176e:	f7 e1       	ldi	r31, 0x17	; 23
    1770:	2f 2e       	mov	r2, r31
    1772:	f0 2d       	mov	r31, r0
    1774:	20 92 13 01 	sts	0x0113, r2	; 0x800113 <rexMode>
	_delay_5ms();
    1778:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    177c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1780:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingEight(2,3,4);
    1784:	44 e0       	ldi	r20, 0x04	; 4
    1786:	63 e0       	ldi	r22, 0x03	; 3
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	0e 94 b1 06 	call	0xd62	; 0xd62 <jumpingEight>
	rexMode = 24;
    178e:	88 e1       	ldi	r24, 0x18	; 24
    1790:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	//Falling
	_delay_5ms();
    1794:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1798:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    179c:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSeven(2,3,4);
    17a0:	44 e0       	ldi	r20, 0x04	; 4
    17a2:	63 e0       	ldi	r22, 0x03	; 3
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	0e 94 34 06 	call	0xc68	; 0xc68 <jumpingSeven>
	rexMode = 23;
    17aa:	20 92 13 01 	sts	0x0113, r2	; 0x800113 <rexMode>
	_delay_5ms();
    17ae:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    17b2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    17b6:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSix(2,3,4);
    17ba:	44 e0       	ldi	r20, 0x04	; 4
    17bc:	63 e0       	ldi	r22, 0x03	; 3
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	0e 94 b6 05 	call	0xb6c	; 0xb6c <jumpingSix>
	rexMode = 22;
    17c4:	30 92 13 01 	sts	0x0113, r3	; 0x800113 <rexMode>
	_delay_5ms();
    17c8:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    17cc:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    17d0:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFive(2,3,4);
    17d4:	44 e0       	ldi	r20, 0x04	; 4
    17d6:	63 e0       	ldi	r22, 0x03	; 3
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	0e 94 46 05 	call	0xa8c	; 0xa8c <jumpingFive>
	rexMode = 21;
    17de:	40 92 13 01 	sts	0x0113, r4	; 0x800113 <rexMode>
	_delay_5ms();
    17e2:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    17e6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    17ea:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFour(2,3,4);
    17ee:	44 e0       	ldi	r20, 0x04	; 4
    17f0:	63 e0       	ldi	r22, 0x03	; 3
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <jumpingFour>
	rexMode = 20;
    17f8:	50 92 13 01 	sts	0x0113, r5	; 0x800113 <rexMode>
	_delay_5ms();
    17fc:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1800:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1804:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingThree(2,3,4);
    1808:	44 e0       	ldi	r20, 0x04	; 4
    180a:	63 e0       	ldi	r22, 0x03	; 3
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <jumpingThree>
	rexMode = 19;
    1812:	60 92 13 01 	sts	0x0113, r6	; 0x800113 <rexMode>
	_delay_5ms();
    1816:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    181a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    181e:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	fallingClear(2);
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	0e 94 f0 06 	call	0xde0	; 0xde0 <fallingClear>
	jumpingTwo(3,4);
    1828:	64 e0       	ldi	r22, 0x04	; 4
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	0e 94 21 04 	call	0x842	; 0x842 <jumpingTwo>
	rexMode = 18;
    1830:	70 92 13 01 	sts	0x0113, r7	; 0x800113 <rexMode>
	_delay_5ms();
    1834:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1838:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    183c:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingOne(3,4);
    1840:	64 e0       	ldi	r22, 0x04	; 4
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <jumpingOne>
	rexMode = 17;
    1848:	80 92 13 01 	sts	0x0113, r8	; 0x800113 <rexMode>
	
	_delay_5ms();
    184c:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1850:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1854:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingEight(3,4,5);
    1858:	45 e0       	ldi	r20, 0x05	; 5
    185a:	64 e0       	ldi	r22, 0x04	; 4
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	0e 94 b1 06 	call	0xd62	; 0xd62 <jumpingEight>
	rexMode = 16;
    1862:	90 92 13 01 	sts	0x0113, r9	; 0x800113 <rexMode>
	_delay_5ms();
    1866:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    186a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    186e:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSeven(3,4,5);
    1872:	45 e0       	ldi	r20, 0x05	; 5
    1874:	64 e0       	ldi	r22, 0x04	; 4
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	0e 94 34 06 	call	0xc68	; 0xc68 <jumpingSeven>
	rexMode = 15;
    187c:	a0 92 13 01 	sts	0x0113, r10	; 0x800113 <rexMode>
	_delay_5ms();
    1880:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1884:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1888:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSix(3,4,5);
    188c:	45 e0       	ldi	r20, 0x05	; 5
    188e:	64 e0       	ldi	r22, 0x04	; 4
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	0e 94 b6 05 	call	0xb6c	; 0xb6c <jumpingSix>
	rexMode = 14;
    1896:	b0 92 13 01 	sts	0x0113, r11	; 0x800113 <rexMode>
	_delay_5ms();
    189a:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    189e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    18a2:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFive(3,4,5);
    18a6:	45 e0       	ldi	r20, 0x05	; 5
    18a8:	64 e0       	ldi	r22, 0x04	; 4
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	0e 94 46 05 	call	0xa8c	; 0xa8c <jumpingFive>
	rexMode = 13;
    18b0:	c0 92 13 01 	sts	0x0113, r12	; 0x800113 <rexMode>
	_delay_5ms();
    18b4:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    18b8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    18bc:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFour(3,4,5);
    18c0:	45 e0       	ldi	r20, 0x05	; 5
    18c2:	64 e0       	ldi	r22, 0x04	; 4
    18c4:	83 e0       	ldi	r24, 0x03	; 3
    18c6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <jumpingFour>
	rexMode = 12;
    18ca:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <rexMode>
	_delay_5ms();
    18ce:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    18d2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    18d6:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingThree(3,4,5);
    18da:	45 e0       	ldi	r20, 0x05	; 5
    18dc:	64 e0       	ldi	r22, 0x04	; 4
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <jumpingThree>
	rexMode = 11;
    18e4:	e0 92 13 01 	sts	0x0113, r14	; 0x800113 <rexMode>
	_delay_5ms();
    18e8:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    18ec:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    18f0:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	fallingClear(3);
    18f4:	83 e0       	ldi	r24, 0x03	; 3
    18f6:	0e 94 f0 06 	call	0xde0	; 0xde0 <fallingClear>
	jumpingTwo(4,5);
    18fa:	65 e0       	ldi	r22, 0x05	; 5
    18fc:	84 e0       	ldi	r24, 0x04	; 4
    18fe:	0e 94 21 04 	call	0x842	; 0x842 <jumpingTwo>
	rexMode = 10;
    1902:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <rexMode>
	_delay_5ms();
    1906:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    190a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    190e:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingOne(4,5);
    1912:	65 e0       	ldi	r22, 0x05	; 5
    1914:	84 e0       	ldi	r24, 0x04	; 4
    1916:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <jumpingOne>
	rexMode = 9;
    191a:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <rexMode>
	
	_delay_5ms();
    191e:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1922:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1926:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingEight(4,5,6);
    192a:	46 e0       	ldi	r20, 0x06	; 6
    192c:	65 e0       	ldi	r22, 0x05	; 5
    192e:	84 e0       	ldi	r24, 0x04	; 4
    1930:	0e 94 b1 06 	call	0xd62	; 0xd62 <jumpingEight>
	rexMode = 8;
    1934:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <rexMode>
	_delay_5ms();
    1938:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    193c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1940:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSeven(4,5,6);
    1944:	46 e0       	ldi	r20, 0x06	; 6
    1946:	65 e0       	ldi	r22, 0x05	; 5
    1948:	84 e0       	ldi	r24, 0x04	; 4
    194a:	0e 94 34 06 	call	0xc68	; 0xc68 <jumpingSeven>
	rexMode = 7;
    194e:	d0 93 13 01 	sts	0x0113, r29	; 0x800113 <rexMode>
	_delay_5ms();
    1952:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1956:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    195a:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingSix(4,5,6);
    195e:	46 e0       	ldi	r20, 0x06	; 6
    1960:	65 e0       	ldi	r22, 0x05	; 5
    1962:	84 e0       	ldi	r24, 0x04	; 4
    1964:	0e 94 b6 05 	call	0xb6c	; 0xb6c <jumpingSix>
	rexMode = 6;
    1968:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <rexMode>
	_delay_5ms();
    196c:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    1970:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1974:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFive(4,5,6);
    1978:	46 e0       	ldi	r20, 0x06	; 6
    197a:	65 e0       	ldi	r22, 0x05	; 5
    197c:	84 e0       	ldi	r24, 0x04	; 4
    197e:	0e 94 46 05 	call	0xa8c	; 0xa8c <jumpingFive>
	rexMode = 5;
    1982:	85 e0       	ldi	r24, 0x05	; 5
    1984:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    1988:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    198c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1990:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingFour(4,5,6);
    1994:	46 e0       	ldi	r20, 0x06	; 6
    1996:	65 e0       	ldi	r22, 0x05	; 5
    1998:	84 e0       	ldi	r24, 0x04	; 4
    199a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <jumpingFour>
	rexMode = 4;
    199e:	84 e0       	ldi	r24, 0x04	; 4
    19a0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    19a4:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    19a8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    19ac:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingThree(4,5,6);
    19b0:	46 e0       	ldi	r20, 0x06	; 6
    19b2:	65 e0       	ldi	r22, 0x05	; 5
    19b4:	84 e0       	ldi	r24, 0x04	; 4
    19b6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <jumpingThree>
	rexMode = 3;
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    19c0:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    19c4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    19c8:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	fallingClear(4);
    19cc:	84 e0       	ldi	r24, 0x04	; 4
    19ce:	0e 94 f0 06 	call	0xde0	; 0xde0 <fallingClear>
	jumpingTwo(5,6);
    19d2:	66 e0       	ldi	r22, 0x06	; 6
    19d4:	85 e0       	ldi	r24, 0x05	; 5
    19d6:	0e 94 21 04 	call	0x842	; 0x842 <jumpingTwo>
	rexMode = 2;
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    19e0:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    19e4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    19e8:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	jumpingOne(5,6);
    19ec:	66 e0       	ldi	r22, 0x06	; 6
    19ee:	85 e0       	ldi	r24, 0x05	; 5
    19f0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <jumpingOne>
	rexMode = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rexMode>
	_delay_5ms();
    19fa:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	scrollLeft();
    19fe:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
	preventScrollBack();
    1a02:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
	
	drawRex();
    1a06:	0e 94 8f 07 	call	0xf1e	; 0xf1e <drawRex>
	rexMode = 0;
    1a0a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rexMode>
}
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	bf 90       	pop	r11
    1a20:	af 90       	pop	r10
    1a22:	9f 90       	pop	r9
    1a24:	8f 90       	pop	r8
    1a26:	7f 90       	pop	r7
    1a28:	6f 90       	pop	r6
    1a2a:	5f 90       	pop	r5
    1a2c:	4f 90       	pop	r4
    1a2e:	3f 90       	pop	r3
    1a30:	2f 90       	pop	r2
    1a32:	08 95       	ret

00001a34 <gameLoop>:
}

// Loop for the game
void gameLoop() {
	while(1) {
		preventScrollBack(); // Clears the first eight vertical lines on the 6th page
    1a34:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
		drawRex(); // Displays a T-Rex on the screen
    1a38:	0e 94 8f 07 	call	0xf1e	; 0xf1e <drawRex>
		scrollLeft(); // Shifts the content on the OLED one pixel to the left
    1a3c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
		unsigned int adcReading = read_adc((unsigned char)0x00); // Reading the ADC output
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	0e 94 88 01 	call	0x310	; 0x310 <read_adc>
    1a46:	ec 01       	movw	r28, r24
		// Checking if the joystick is tilted up
		if (adcReading < 300) {
    1a48:	cc 32       	cpi	r28, 0x2C	; 44
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	d8 07       	cpc	r29, r24
    1a4e:	38 f4       	brcc	.+14     	; 0x1a5e <gameLoop+0x2a>
			LEDOn(); // Turn LED on
    1a50:	0e 94 a0 01 	call	0x340	; 0x340 <LEDOn>
			buzzerToggle(); // Sounds the buzzer shortly
    1a54:	0e 94 a8 01 	call	0x350	; 0x350 <buzzerToggle>
			jumpingRex(); // Jumping animation
    1a58:	0e 94 4b 0a 	call	0x1496	; 0x1496 <jumpingRex>
    1a5c:	1b c0       	rjmp	.+54     	; 0x1a94 <gameLoop+0x60>
		}
		//Checking if the joystick is tilted down
		else if (adcReading > 650) {
    1a5e:	cb 38       	cpi	r28, 0x8B	; 139
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	d8 07       	cpc	r29, r24
    1a64:	a8 f0       	brcs	.+42     	; 0x1a90 <gameLoop+0x5c>
			duckingRex(); // Ducking animation
    1a66:	0e 94 c8 03 	call	0x790	; 0x790 <duckingRex>
			// Checking when the joystick returns to rest position
			while(adcReading > 650) {
    1a6a:	0c c0       	rjmp	.+24     	; 0x1a84 <gameLoop+0x50>
				duckingFour(); // Keeps the T-Rex in ducking mode as long as the stick is tilted down
    1a6c:	0e 94 8a 03 	call	0x714	; 0x714 <duckingFour>
				adcReading = read_adc((unsigned char)0x00); // Reading the ADC output
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	0e 94 88 01 	call	0x310	; 0x310 <read_adc>
    1a76:	ec 01       	movw	r28, r24
				preventScrollBack(); // Clears the first eight vertical lines on the 6th page
    1a78:	0e 94 03 07 	call	0xe06	; 0xe06 <preventScrollBack>
				scrollLeft(); // Shifts the content on the OLED one pixel to the left
    1a7c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <scrollLeft>
				_delay_5ms();
    1a80:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
		}
		//Checking if the joystick is tilted down
		else if (adcReading > 650) {
			duckingRex(); // Ducking animation
			// Checking when the joystick returns to rest position
			while(adcReading > 650) {
    1a84:	cb 38       	cpi	r28, 0x8B	; 139
    1a86:	d2 40       	sbci	r29, 0x02	; 2
    1a88:	88 f7       	brcc	.-30     	; 0x1a6c <gameLoop+0x38>
				adcReading = read_adc((unsigned char)0x00); // Reading the ADC output
				preventScrollBack(); // Clears the first eight vertical lines on the 6th page
				scrollLeft(); // Shifts the content on the OLED one pixel to the left
				_delay_5ms();
			}
			unduckingRex(); // Animation that returns the T-Rex to original position when the joystick is return to rest position
    1a8a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <unduckingRex>
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <gameLoop+0x60>
		}
		else {
			LEDOff(); // LED is off when joystick is in rest position
    1a90:	0e 94 a4 01 	call	0x348	; 0x348 <LEDOff>
		}
		
		_delay_5ms();
    1a94:	0e 94 34 01 	call	0x268	; 0x268 <_delay_5ms>
	}
    1a98:	cd cf       	rjmp	.-102    	; 0x1a34 <gameLoop>

00001a9a <drawScore>:
		sendData(pgm_read_byte(&numbers[number][i]));
	}
}

// Displays the score text to the screen
void drawScore() {
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
	position(0,0);
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// S
	for (int i = 0; i < 5; i++) {
    1aa6:	c0 e0       	ldi	r28, 0x00	; 0
    1aa8:	d0 e0       	ldi	r29, 0x00	; 0
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <drawScore+0x20>
		sendData(pgm_read_byte(&scoreLetters[0][i]));
    1aac:	fe 01       	movw	r30, r28
    1aae:	e0 57       	subi	r30, 0x70	; 112
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	84 91       	lpm	r24, Z
    1ab4:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// Displays the score text to the screen
void drawScore() {
	position(0,0);
	// S
	for (int i = 0; i < 5; i++) {
    1ab8:	21 96       	adiw	r28, 0x01	; 1
    1aba:	c5 30       	cpi	r28, 0x05	; 5
    1abc:	d1 05       	cpc	r29, r1
    1abe:	b4 f3       	brlt	.-20     	; 0x1aac <drawScore+0x12>
		sendData(pgm_read_byte(&scoreLetters[0][i]));
	}
	position(7,0);
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	87 e0       	ldi	r24, 0x07	; 7
    1ac4:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// R
	for (int i = 0; i < 5; i++) {
    1ac8:	c0 e0       	ldi	r28, 0x00	; 0
    1aca:	d0 e0       	ldi	r29, 0x00	; 0
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <drawScore+0x42>
		sendData(pgm_read_byte(&scoreLetters[1][i]));
    1ace:	fe 01       	movw	r30, r28
    1ad0:	eb 56       	subi	r30, 0x6B	; 107
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	84 91       	lpm	r24, Z
    1ad6:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int i = 0; i < 5; i++) {
		sendData(pgm_read_byte(&scoreLetters[0][i]));
	}
	position(7,0);
	// R
	for (int i = 0; i < 5; i++) {
    1ada:	21 96       	adiw	r28, 0x01	; 1
    1adc:	c5 30       	cpi	r28, 0x05	; 5
    1ade:	d1 05       	cpc	r29, r1
    1ae0:	b4 f3       	brlt	.-20     	; 0x1ace <drawScore+0x34>
		sendData(pgm_read_byte(&scoreLetters[1][i]));
	}
	position(14,0);
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	8e e0       	ldi	r24, 0x0E	; 14
    1ae6:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// O
	for (int i = 0; i < 5; i++) {
    1aea:	c0 e0       	ldi	r28, 0x00	; 0
    1aec:	d0 e0       	ldi	r29, 0x00	; 0
    1aee:	07 c0       	rjmp	.+14     	; 0x1afe <drawScore+0x64>
		sendData(pgm_read_byte(&scoreLetters[2][i]));
    1af0:	fe 01       	movw	r30, r28
    1af2:	e6 56       	subi	r30, 0x66	; 102
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	84 91       	lpm	r24, Z
    1af8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int i = 0; i < 5; i++) {
		sendData(pgm_read_byte(&scoreLetters[1][i]));
	}
	position(14,0);
	// O
	for (int i = 0; i < 5; i++) {
    1afc:	21 96       	adiw	r28, 0x01	; 1
    1afe:	c5 30       	cpi	r28, 0x05	; 5
    1b00:	d1 05       	cpc	r29, r1
    1b02:	b4 f3       	brlt	.-20     	; 0x1af0 <drawScore+0x56>
		sendData(pgm_read_byte(&scoreLetters[2][i]));
	}
	position(21,0);
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	85 e1       	ldi	r24, 0x15	; 21
    1b08:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// R
	for (int i = 0; i < 5; i++) {
    1b0c:	c0 e0       	ldi	r28, 0x00	; 0
    1b0e:	d0 e0       	ldi	r29, 0x00	; 0
    1b10:	07 c0       	rjmp	.+14     	; 0x1b20 <drawScore+0x86>
		sendData(pgm_read_byte(&scoreLetters[3][i]));
    1b12:	fe 01       	movw	r30, r28
    1b14:	e1 56       	subi	r30, 0x61	; 97
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	84 91       	lpm	r24, Z
    1b1a:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int i = 0; i < 5; i++) {
		sendData(pgm_read_byte(&scoreLetters[2][i]));
	}
	position(21,0);
	// R
	for (int i = 0; i < 5; i++) {
    1b1e:	21 96       	adiw	r28, 0x01	; 1
    1b20:	c5 30       	cpi	r28, 0x05	; 5
    1b22:	d1 05       	cpc	r29, r1
    1b24:	b4 f3       	brlt	.-20     	; 0x1b12 <drawScore+0x78>
		sendData(pgm_read_byte(&scoreLetters[3][i]));
	}
	position(28,0);
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	8c e1       	ldi	r24, 0x1C	; 28
    1b2a:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	// E
	for (int i = 0; i < 5; i++) {
    1b2e:	c0 e0       	ldi	r28, 0x00	; 0
    1b30:	d0 e0       	ldi	r29, 0x00	; 0
    1b32:	07 c0       	rjmp	.+14     	; 0x1b42 <drawScore+0xa8>
		sendData(pgm_read_byte(&scoreLetters[4][i]));
    1b34:	fe 01       	movw	r30, r28
    1b36:	ec 55       	subi	r30, 0x5C	; 92
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	84 91       	lpm	r24, Z
    1b3c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	for (int i = 0; i < 5; i++) {
		sendData(pgm_read_byte(&scoreLetters[3][i]));
	}
	position(28,0);
	// E
	for (int i = 0; i < 5; i++) {
    1b40:	21 96       	adiw	r28, 0x01	; 1
    1b42:	c5 30       	cpi	r28, 0x05	; 5
    1b44:	d1 05       	cpc	r29, r1
    1b46:	b4 f3       	brlt	.-20     	; 0x1b34 <drawScore+0x9a>
		sendData(pgm_read_byte(&scoreLetters[4][i]));
	}
	
	position(35,0);
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	83 e2       	ldi	r24, 0x23	; 35
    1b4c:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	sendData(0x24); //colon
    1b50:	84 e2       	ldi	r24, 0x24	; 36
    1b52:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
}
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <letterDisplay>:

// Displays a two page letter to the screen a certain location on the first two pages 
void letterDisplay(uint8_t x, uint8_t index) {
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	d8 2f       	mov	r29, r24
    1b66:	c6 2f       	mov	r28, r22
	position(x,0);
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 7; i++) {
    1b6e:	00 e0       	ldi	r16, 0x00	; 0
    1b70:	10 e0       	ldi	r17, 0x00	; 0
    1b72:	16 c0       	rjmp	.+44     	; 0x1ba0 <letterDisplay+0x44>
		sendData(pgm_read_byte(&Letters[index][i]));
    1b74:	8c 2f       	mov	r24, r28
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	ee 0f       	add	r30, r30
    1b84:	ff 1f       	adc	r31, r31
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	e8 1b       	sub	r30, r24
    1b8c:	f9 0b       	sbc	r31, r25
    1b8e:	e0 0f       	add	r30, r16
    1b90:	f1 1f       	adc	r31, r17
    1b92:	e7 55       	subi	r30, 0x57	; 87
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	84 91       	lpm	r24, Z
    1b98:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
}

// Displays a two page letter to the screen a certain location on the first two pages 
void letterDisplay(uint8_t x, uint8_t index) {
	position(x,0);
	for (int i = 0; i < 7; i++) {
    1b9c:	0f 5f       	subi	r16, 0xFF	; 255
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba0:	07 30       	cpi	r16, 0x07	; 7
    1ba2:	11 05       	cpc	r17, r1
    1ba4:	3c f3       	brlt	.-50     	; 0x1b74 <letterDisplay+0x18>
		sendData(pgm_read_byte(&Letters[index][i]));
	}
	position(x,1);
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	8d 2f       	mov	r24, r29
    1baa:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 7; i < 14; i++) {
    1bae:	07 e0       	ldi	r16, 0x07	; 7
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
    1bb2:	16 c0       	rjmp	.+44     	; 0x1be0 <letterDisplay+0x84>
		sendData(pgm_read_byte(&Letters[index][i]));
    1bb4:	8c 2f       	mov	r24, r28
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	e8 1b       	sub	r30, r24
    1bcc:	f9 0b       	sbc	r31, r25
    1bce:	e0 0f       	add	r30, r16
    1bd0:	f1 1f       	adc	r31, r17
    1bd2:	e7 55       	subi	r30, 0x57	; 87
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	84 91       	lpm	r24, Z
    1bd8:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	position(x,0);
	for (int i = 0; i < 7; i++) {
		sendData(pgm_read_byte(&Letters[index][i]));
	}
	position(x,1);
	for (int i = 7; i < 14; i++) {
    1bdc:	0f 5f       	subi	r16, 0xFF	; 255
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	0e 30       	cpi	r16, 0x0E	; 14
    1be2:	11 05       	cpc	r17, r1
    1be4:	3c f3       	brlt	.-50     	; 0x1bb4 <letterDisplay+0x58>
		sendData(pgm_read_byte(&Letters[index][i]));
	}
}
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	08 95       	ret

00001bf0 <gameStart>:
	}	
}

// Displays the start message asking user to press down on the joystick
void gameStart() {
	letterDisplay(0, 0); // P
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(7, 1); // U
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	87 e0       	ldi	r24, 0x07	; 7
    1bfc:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(14, 2); // S
    1c00:	62 e0       	ldi	r22, 0x02	; 2
    1c02:	8e e0       	ldi	r24, 0x0E	; 14
    1c04:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(21, 3); // H
    1c08:	63 e0       	ldi	r22, 0x03	; 3
    1c0a:	85 e1       	ldi	r24, 0x15	; 21
    1c0c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	
	letterDisplay(31, 2); // S
    1c10:	62 e0       	ldi	r22, 0x02	; 2
    1c12:	8f e1       	ldi	r24, 0x1F	; 31
    1c14:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(38, 4); // T
    1c18:	64 e0       	ldi	r22, 0x04	; 4
    1c1a:	86 e2       	ldi	r24, 0x26	; 38
    1c1c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(46, 6); // I
    1c20:	66 e0       	ldi	r22, 0x06	; 6
    1c22:	8e e2       	ldi	r24, 0x2E	; 46
    1c24:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(54, 7); // C
    1c28:	67 e0       	ldi	r22, 0x07	; 7
    1c2a:	86 e3       	ldi	r24, 0x36	; 54
    1c2c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(61, 8); // K
    1c30:	68 e0       	ldi	r22, 0x08	; 8
    1c32:	8d e3       	ldi	r24, 0x3D	; 61
    1c34:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	
	letterDisplay(71, 4); // T
    1c38:	64 e0       	ldi	r22, 0x04	; 4
    1c3a:	87 e4       	ldi	r24, 0x47	; 71
    1c3c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(79, 5); // O
    1c40:	65 e0       	ldi	r22, 0x05	; 5
    1c42:	8f e4       	ldi	r24, 0x4F	; 79
    1c44:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	
	letterDisplay(89, 2); // S
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	89 e5       	ldi	r24, 0x59	; 89
    1c4c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(96, 4); // T
    1c50:	64 e0       	ldi	r22, 0x04	; 4
    1c52:	80 e6       	ldi	r24, 0x60	; 96
    1c54:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(104, 9); // A
    1c58:	69 e0       	ldi	r22, 0x09	; 9
    1c5a:	88 e6       	ldi	r24, 0x68	; 104
    1c5c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(111, 10); // R
    1c60:	6a e0       	ldi	r22, 0x0A	; 10
    1c62:	8f e6       	ldi	r24, 0x6F	; 111
    1c64:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(118, 4); // T
    1c68:	64 e0       	ldi	r22, 0x04	; 4
    1c6a:	86 e7       	ldi	r24, 0x76	; 118
    1c6c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
    1c70:	08 95       	ret

00001c72 <gameEnd>:
}

// Displays the end message asking user to press down on touch sensor to reset the screen
void gameEnd() {
	letterDisplay(0, 0); // P
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(7, 1); // U
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	87 e0       	ldi	r24, 0x07	; 7
    1c7e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(14, 2); // S
    1c82:	62 e0       	ldi	r22, 0x02	; 2
    1c84:	8e e0       	ldi	r24, 0x0E	; 14
    1c86:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(21, 3); // H
    1c8a:	63 e0       	ldi	r22, 0x03	; 3
    1c8c:	85 e1       	ldi	r24, 0x15	; 21
    1c8e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	
	letterDisplay(30, 2); // S
    1c92:	62 e0       	ldi	r22, 0x02	; 2
    1c94:	8e e1       	ldi	r24, 0x1E	; 30
    1c96:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(37, 11); // E
    1c9a:	6b e0       	ldi	r22, 0x0B	; 11
    1c9c:	85 e2       	ldi	r24, 0x25	; 37
    1c9e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(44, 12); // N
    1ca2:	6c e0       	ldi	r22, 0x0C	; 12
    1ca4:	8c e2       	ldi	r24, 0x2C	; 44
    1ca6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(51, 2); // S
    1caa:	62 e0       	ldi	r22, 0x02	; 2
    1cac:	83 e3       	ldi	r24, 0x33	; 51
    1cae:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(58, 5); // O
    1cb2:	65 e0       	ldi	r22, 0x05	; 5
    1cb4:	8a e3       	ldi	r24, 0x3A	; 58
    1cb6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(65, 10); // R
    1cba:	6a e0       	ldi	r22, 0x0A	; 10
    1cbc:	81 e4       	ldi	r24, 0x41	; 65
    1cbe:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	
	letterDisplay(74, 4); // T
    1cc2:	64 e0       	ldi	r22, 0x04	; 4
    1cc4:	8a e4       	ldi	r24, 0x4A	; 74
    1cc6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(82, 5); // O
    1cca:	65 e0       	ldi	r22, 0x05	; 5
    1ccc:	82 e5       	ldi	r24, 0x52	; 82
    1cce:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	
	letterDisplay(92, 10); // R
    1cd2:	6a e0       	ldi	r22, 0x0A	; 10
    1cd4:	8c e5       	ldi	r24, 0x5C	; 92
    1cd6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(99, 11); // E
    1cda:	6b e0       	ldi	r22, 0x0B	; 11
    1cdc:	83 e6       	ldi	r24, 0x63	; 99
    1cde:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(106, 2); // S
    1ce2:	62 e0       	ldi	r22, 0x02	; 2
    1ce4:	8a e6       	ldi	r24, 0x6A	; 106
    1ce6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(113, 11); // E
    1cea:	6b e0       	ldi	r22, 0x0B	; 11
    1cec:	81 e7       	ldi	r24, 0x71	; 113
    1cee:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
	letterDisplay(120, 4); // T
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	88 e7       	ldi	r24, 0x78	; 120
    1cf6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <letterDisplay>
    1cfa:	08 95       	ret

00001cfc <clearTopTwoPages>:
	sendOneCommandByte(0x10 + ((x >> 4) & 0x0F));
	sendOneCommandByte(0xB0 + y);
}

// Clears the top two pages of the display
void clearTopTwoPages() {
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
	position(0,0);
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int j = 0; j < 128; j++) {
    1d08:	c0 e0       	ldi	r28, 0x00	; 0
    1d0a:	d0 e0       	ldi	r29, 0x00	; 0
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <clearTopTwoPages+0x1a>
		sendData(0x00);
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
}

// Clears the top two pages of the display
void clearTopTwoPages() {
	position(0,0);
	for (int j = 0; j < 128; j++) {
    1d14:	21 96       	adiw	r28, 0x01	; 1
    1d16:	c0 38       	cpi	r28, 0x80	; 128
    1d18:	d1 05       	cpc	r29, r1
    1d1a:	cc f3       	brlt	.-14     	; 0x1d0e <clearTopTwoPages+0x12>
		sendData(0x00);
	}
	position(0,1);
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int j = 0; j < 128; j++) {
    1d24:	c0 e0       	ldi	r28, 0x00	; 0
    1d26:	d0 e0       	ldi	r29, 0x00	; 0
    1d28:	04 c0       	rjmp	.+8      	; 0x1d32 <clearTopTwoPages+0x36>
		sendData(0x00);
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>
	position(0,0);
	for (int j = 0; j < 128; j++) {
		sendData(0x00);
	}
	position(0,1);
	for (int j = 0; j < 128; j++) {
    1d30:	21 96       	adiw	r28, 0x01	; 1
    1d32:	c0 38       	cpi	r28, 0x80	; 128
    1d34:	d1 05       	cpc	r29, r1
    1d36:	cc f3       	brlt	.-14     	; 0x1d2a <clearTopTwoPages+0x2e>
		sendData(0x00);
	}
}
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <stickPress>:

}

// Loops until the joystick is pressed down
void stickPress() {
	while(pressCondition) {
    1d3e:	22 c0       	rjmp	.+68     	; 0x1d84 <stickPress+0x46>
		if ((PIND & 0x40) == 0) {
    1d40:	4e 99       	sbic	0x09, 6	; 9
    1d42:	20 c0       	rjmp	.+64     	; 0x1d84 <stickPress+0x46>
			clearTopTwoPages(); // Clears the message from the top of screen
    1d44:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <clearTopTwoPages>
			while ((PIND & 0x40) == 0) {
    1d48:	4e 9b       	sbis	0x09, 6	; 9
    1d4a:	fe cf       	rjmp	.-4      	; 0x1d48 <stickPress+0xa>
				
			}
			drawScore(); // Draw the letter for score
    1d4c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <drawScore>
			// Displays 0 0 0 0 on the screen
			displayNumber(0, 38);
    1d50:	66 e2       	ldi	r22, 0x26	; 38
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 fe 08 	call	0x11fc	; 0x11fc <displayNumber>
			displayNumber(0, 44);
    1d5c:	6c e2       	ldi	r22, 0x2C	; 44
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 fe 08 	call	0x11fc	; 0x11fc <displayNumber>
			displayNumber(0, 50);
    1d68:	62 e3       	ldi	r22, 0x32	; 50
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 fe 08 	call	0x11fc	; 0x11fc <displayNumber>
			displayNumber(0, 56);
    1d74:	68 e3       	ldi	r22, 0x38	; 56
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <displayNumber>
			pressCondition = 0;
    1d80:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pressCondition>

}

// Loops until the joystick is pressed down
void stickPress() {
	while(pressCondition) {
    1d84:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pressCondition>
    1d88:	81 11       	cpse	r24, r1
    1d8a:	da cf       	rjmp	.-76     	; 0x1d40 <stickPress+0x2>
			displayNumber(0, 50);
			displayNumber(0, 56);
			pressCondition = 0;
		}
	}
}
    1d8c:	08 95       	ret

00001d8e <stopDisplay>:
	displayScore();
}

// Stop the display when a collision has occurred
void stopDisplay() {
	sendOneCommandByte(0x2E); // Stops the screen from scrolling
    1d8e:	8e e2       	ldi	r24, 0x2E	; 46
    1d90:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	clearTopTwoPages(); // Clears the score from the screen
    1d94:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <clearTopTwoPages>
	gameEnd(); // Displays the message to reset the screen
    1d98:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <gameEnd>
	if (resetCount == 0) {
    1d9c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <resetCount>
    1da0:	81 11       	cpse	r24, r1
    1da2:	14 c0       	rjmp	.+40     	; 0x1dcc <stopDisplay+0x3e>
		displayFinalScore(); // Displays the final score on a lower part of the screen
    1da4:	0e 94 12 08 	call	0x1024	; 0x1024 <displayFinalScore>
		buzzerOn(); // Sounds the buzzer when the game has ended
    1da8:	0e 94 b1 01 	call	0x362	; 0x362 <buzzerOn>
    1dac:	2f ef       	ldi	r18, 0xFF	; 255
    1dae:	87 ea       	ldi	r24, 0xA7	; 167
    1db0:	91 e6       	ldi	r25, 0x61	; 97
    1db2:	21 50       	subi	r18, 0x01	; 1
    1db4:	80 40       	sbci	r24, 0x00	; 0
    1db6:	90 40       	sbci	r25, 0x00	; 0
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <stopDisplay+0x24>
    1dba:	00 c0       	rjmp	.+0      	; 0x1dbc <stopDisplay+0x2e>
    1dbc:	00 00       	nop
		_delay_ms(2000);
		buzzerOff(); // Turns the buzzer off
    1dbe:	0e 94 b5 01 	call	0x36a	; 0x36a <buzzerOff>
		resetCount++;
    1dc2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <resetCount>
    1dc6:	8f 5f       	subi	r24, 0xFF	; 255
    1dc8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <resetCount>
    1dcc:	08 95       	ret

00001dce <collisionCheck>:
		_delay_5ms();
	}
}

// Checks if the T-Rex has collided with an active object
void collisionCheck() {
    1dce:	ff 92       	push	r15
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
	uint8_t tempMax = max(max(cactusOne, cactusTwo), max(pteroOne, pteroTwo)); // Checks which active object is closest to collision point
    1dd8:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <pteroTwo>
    1ddc:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <pteroOne>
    1de0:	60 2f       	mov	r22, r16
    1de2:	81 2f       	mov	r24, r17
    1de4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <max>
    1de8:	f8 2e       	mov	r15, r24
    1dea:	d0 91 16 01 	lds	r29, 0x0116	; 0x800116 <cactusTwo>
    1dee:	c0 91 17 01 	lds	r28, 0x0117	; 0x800117 <cactusOne>
    1df2:	6d 2f       	mov	r22, r29
    1df4:	8c 2f       	mov	r24, r28
    1df6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <max>
    1dfa:	6f 2d       	mov	r22, r15
    1dfc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <max>
	// Checks which object is active
	if (tempMax != 0) {
    1e00:	88 23       	and	r24, r24
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <collisionCheck+0x38>
    1e04:	66 c0       	rjmp	.+204    	; 0x1ed2 <collisionCheck+0x104>
		// First Cactus
		if (cactusOne == tempMax) {
    1e06:	c8 13       	cpse	r28, r24
    1e08:	16 c0       	rjmp	.+44     	; 0x1e36 <collisionCheck+0x68>
			// Checks if the T-Rex will collide with the cactus one pixel before entering collision zone
			if ((cactusOne == 98) && !((rexMode >= 10) && (rexMode <= 24))) {
    1e0a:	c2 36       	cpi	r28, 0x62	; 98
    1e0c:	41 f4       	brne	.+16     	; 0x1e1e <collisionCheck+0x50>
    1e0e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rexMode>
    1e12:	8a 50       	subi	r24, 0x0A	; 10
    1e14:	8f 30       	cpi	r24, 0x0F	; 15
    1e16:	18 f0       	brcs	.+6      	; 0x1e1e <collisionCheck+0x50>
				stopDisplay();
    1e18:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <stopDisplay>
    1e1c:	5a c0       	rjmp	.+180    	; 0x1ed2 <collisionCheck+0x104>
			}
			// Checks if the T-Rex will collide with the cactus while in collision zone
			else if ((cactusOne > 98) && !((rexMode >= 11) && (rexMode <= 24))) {
    1e1e:	c3 36       	cpi	r28, 0x63	; 99
    1e20:	08 f4       	brcc	.+2      	; 0x1e24 <collisionCheck+0x56>
    1e22:	57 c0       	rjmp	.+174    	; 0x1ed2 <collisionCheck+0x104>
    1e24:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rexMode>
    1e28:	8b 50       	subi	r24, 0x0B	; 11
    1e2a:	8e 30       	cpi	r24, 0x0E	; 14
    1e2c:	08 f4       	brcc	.+2      	; 0x1e30 <collisionCheck+0x62>
    1e2e:	51 c0       	rjmp	.+162    	; 0x1ed2 <collisionCheck+0x104>
				stopDisplay();
    1e30:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <stopDisplay>
    1e34:	4e c0       	rjmp	.+156    	; 0x1ed2 <collisionCheck+0x104>
			}
		}
		// Second Cactus
		else if (cactusTwo == tempMax) {
    1e36:	d8 13       	cpse	r29, r24
    1e38:	15 c0       	rjmp	.+42     	; 0x1e64 <collisionCheck+0x96>
			// Checks if the T-Rex will collide with the cactus one pixel before entering collision zone
			if ((cactusTwo == 98) && !((rexMode >= 10) && (rexMode <= 24))) {
    1e3a:	d2 36       	cpi	r29, 0x62	; 98
    1e3c:	41 f4       	brne	.+16     	; 0x1e4e <collisionCheck+0x80>
    1e3e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rexMode>
    1e42:	8a 50       	subi	r24, 0x0A	; 10
    1e44:	8f 30       	cpi	r24, 0x0F	; 15
    1e46:	18 f0       	brcs	.+6      	; 0x1e4e <collisionCheck+0x80>
				stopDisplay();
    1e48:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <stopDisplay>
    1e4c:	42 c0       	rjmp	.+132    	; 0x1ed2 <collisionCheck+0x104>
			}
			// Checks if the T-Rex will collide with the cactus while in collision zone
			else if ((cactusTwo > 98) && !((rexMode >= 11) && (rexMode <= 24))) {
    1e4e:	d3 36       	cpi	r29, 0x63	; 99
    1e50:	08 f4       	brcc	.+2      	; 0x1e54 <collisionCheck+0x86>
    1e52:	3f c0       	rjmp	.+126    	; 0x1ed2 <collisionCheck+0x104>
    1e54:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rexMode>
    1e58:	8b 50       	subi	r24, 0x0B	; 11
    1e5a:	8e 30       	cpi	r24, 0x0E	; 14
    1e5c:	d0 f1       	brcs	.+116    	; 0x1ed2 <collisionCheck+0x104>
				stopDisplay();
    1e5e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <stopDisplay>
    1e62:	37 c0       	rjmp	.+110    	; 0x1ed2 <collisionCheck+0x104>
			}
		}
		// First pterodactyl
		else if (pteroOne == tempMax) {
    1e64:	18 13       	cpse	r17, r24
    1e66:	1a c0       	rjmp	.+52     	; 0x1e9c <collisionCheck+0xce>
			// Checks if the T-Rex will collide with the pterodactyl one pixel before entering collision zone
			if ((pteroOne == 92) && !((rexMode >= 10) && (rexMode <= 24)) && !(rexMode >= 27)) {
    1e68:	1c 35       	cpi	r17, 0x5C	; 92
    1e6a:	59 f4       	brne	.+22     	; 0x1e82 <collisionCheck+0xb4>
    1e6c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rexMode>
    1e70:	96 ef       	ldi	r25, 0xF6	; 246
    1e72:	98 0f       	add	r25, r24
    1e74:	9f 30       	cpi	r25, 0x0F	; 15
    1e76:	28 f0       	brcs	.+10     	; 0x1e82 <collisionCheck+0xb4>
    1e78:	8b 31       	cpi	r24, 0x1B	; 27
    1e7a:	18 f4       	brcc	.+6      	; 0x1e82 <collisionCheck+0xb4>
				stopDisplay();
    1e7c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <stopDisplay>
    1e80:	28 c0       	rjmp	.+80     	; 0x1ed2 <collisionCheck+0x104>
			}
			// Checks if the T-Rex will collide with the pterodactyl while in collision zone
			else if ((pteroOne > 92) && !((rexMode >= 11) && (rexMode <= 24)) && !(rexMode == 28)) {
    1e82:	1d 35       	cpi	r17, 0x5D	; 93
    1e84:	30 f1       	brcs	.+76     	; 0x1ed2 <collisionCheck+0x104>
    1e86:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rexMode>
    1e8a:	95 ef       	ldi	r25, 0xF5	; 245
    1e8c:	98 0f       	add	r25, r24
    1e8e:	9e 30       	cpi	r25, 0x0E	; 14
    1e90:	00 f1       	brcs	.+64     	; 0x1ed2 <collisionCheck+0x104>
    1e92:	8c 31       	cpi	r24, 0x1C	; 28
    1e94:	f1 f0       	breq	.+60     	; 0x1ed2 <collisionCheck+0x104>
				stopDisplay();
    1e96:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <stopDisplay>
    1e9a:	1b c0       	rjmp	.+54     	; 0x1ed2 <collisionCheck+0x104>
			}
		}
		// Second pterodactyl
		else if (pteroTwo == tempMax) {
    1e9c:	08 13       	cpse	r16, r24
    1e9e:	19 c0       	rjmp	.+50     	; 0x1ed2 <collisionCheck+0x104>
			// Checks if the T-Rex will collide with the pterodactyl one pixel before entering collision zone
			if ((pteroTwo == 92) && !((rexMode >= 10) && (rexMode <= 24)) && !(rexMode >= 27)) {
    1ea0:	0c 35       	cpi	r16, 0x5C	; 92
    1ea2:	59 f4       	brne	.+22     	; 0x1eba <collisionCheck+0xec>
    1ea4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rexMode>
    1ea8:	96 ef       	ldi	r25, 0xF6	; 246
    1eaa:	98 0f       	add	r25, r24
    1eac:	9f 30       	cpi	r25, 0x0F	; 15
    1eae:	28 f0       	brcs	.+10     	; 0x1eba <collisionCheck+0xec>
    1eb0:	8b 31       	cpi	r24, 0x1B	; 27
    1eb2:	18 f4       	brcc	.+6      	; 0x1eba <collisionCheck+0xec>
				stopDisplay();
    1eb4:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <stopDisplay>
    1eb8:	0c c0       	rjmp	.+24     	; 0x1ed2 <collisionCheck+0x104>
			}
			// Checks if the T-Rex will collide with the pterodactyl while in collision zone
			else if ((pteroTwo > 92) && !((rexMode >= 11) && (rexMode <= 24)) && !(rexMode == 28)) {
    1eba:	0d 35       	cpi	r16, 0x5D	; 93
    1ebc:	50 f0       	brcs	.+20     	; 0x1ed2 <collisionCheck+0x104>
    1ebe:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rexMode>
    1ec2:	95 ef       	ldi	r25, 0xF5	; 245
    1ec4:	98 0f       	add	r25, r24
    1ec6:	9e 30       	cpi	r25, 0x0E	; 14
    1ec8:	20 f0       	brcs	.+8      	; 0x1ed2 <collisionCheck+0x104>
    1eca:	8c 31       	cpi	r24, 0x1C	; 28
    1ecc:	11 f0       	breq	.+4      	; 0x1ed2 <collisionCheck+0x104>
				stopDisplay();
    1ece:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <stopDisplay>
			}
		}
		
	}
}
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	ff 90       	pop	r15
    1edc:	08 95       	ret

00001ede <__vector_16>:
		PORTC |= 0x04;
	}
}

// Checks if the T-Rex has collided with any active objects constantly
ISR(TIMER0_OVF_vect) {
    1ede:	1f 92       	push	r1
    1ee0:	0f 92       	push	r0
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	0f 92       	push	r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	2f 93       	push	r18
    1eea:	3f 93       	push	r19
    1eec:	4f 93       	push	r20
    1eee:	5f 93       	push	r21
    1ef0:	6f 93       	push	r22
    1ef2:	7f 93       	push	r23
    1ef4:	8f 93       	push	r24
    1ef6:	9f 93       	push	r25
    1ef8:	af 93       	push	r26
    1efa:	bf 93       	push	r27
    1efc:	ef 93       	push	r30
    1efe:	ff 93       	push	r31
	collisionCheck();
    1f00:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <collisionCheck>
}
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	bf 91       	pop	r27
    1f0a:	af 91       	pop	r26
    1f0c:	9f 91       	pop	r25
    1f0e:	8f 91       	pop	r24
    1f10:	7f 91       	pop	r23
    1f12:	6f 91       	pop	r22
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <clearDisplay>:
		sendData(0x00);
	}
}

// Clears the entire display
void clearDisplay() {
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
	position(0,0);
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	0e 94 0e 02 	call	0x41c	; 0x41c <position>
	for (int i = 0; i < 8; i++) {
    1f36:	00 e0       	ldi	r16, 0x00	; 0
    1f38:	10 e0       	ldi	r17, 0x00	; 0
    1f3a:	0c c0       	rjmp	.+24     	; 0x1f54 <clearDisplay+0x2e>
		for (int j = 0; j < 128; j++) {
			sendData(0x00);
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	0e 94 37 02 	call	0x46e	; 0x46e <sendData>

// Clears the entire display
void clearDisplay() {
	position(0,0);
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 128; j++) {
    1f42:	21 96       	adiw	r28, 0x01	; 1
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <clearDisplay+0x24>
    1f46:	c0 e0       	ldi	r28, 0x00	; 0
    1f48:	d0 e0       	ldi	r29, 0x00	; 0
    1f4a:	c0 38       	cpi	r28, 0x80	; 128
    1f4c:	d1 05       	cpc	r29, r1
    1f4e:	b4 f3       	brlt	.-20     	; 0x1f3c <clearDisplay+0x16>
}

// Clears the entire display
void clearDisplay() {
	position(0,0);
	for (int i = 0; i < 8; i++) {
    1f50:	0f 5f       	subi	r16, 0xFF	; 255
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
    1f54:	08 30       	cpi	r16, 0x08	; 8
    1f56:	11 05       	cpc	r17, r1
    1f58:	b4 f3       	brlt	.-20     	; 0x1f46 <clearDisplay+0x20>
		for (int j = 0; j < 128; j++) {
			sendData(0x00);
		}
	}
}
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	08 95       	ret

00001f64 <oled_init>:
    1f64:	2f ef       	ldi	r18, 0xFF	; 255
    1f66:	81 ee       	ldi	r24, 0xE1	; 225
    1f68:	94 e0       	ldi	r25, 0x04	; 4
    1f6a:	21 50       	subi	r18, 0x01	; 1
    1f6c:	80 40       	sbci	r24, 0x00	; 0
    1f6e:	90 40       	sbci	r25, 0x00	; 0
    1f70:	e1 f7       	brne	.-8      	; 0x1f6a <oled_init+0x6>
    1f72:	00 c0       	rjmp	.+0      	; 0x1f74 <oled_init+0x10>
    1f74:	00 00       	nop
}

// Initializes OLED display
void oled_init() {
	_delay_ms(100);
	sendOneCommandByte(0xAE);
    1f76:	8e ea       	ldi	r24, 0xAE	; 174
    1f78:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	
	sendTwoCommandByte(0xD5,0x80);
    1f7c:	60 e8       	ldi	r22, 0x80	; 128
    1f7e:	85 ed       	ldi	r24, 0xD5	; 213
    1f80:	0e 94 22 02 	call	0x444	; 0x444 <sendTwoCommandByte>
	sendTwoCommandByte(0xA8,0x3F);
    1f84:	6f e3       	ldi	r22, 0x3F	; 63
    1f86:	88 ea       	ldi	r24, 0xA8	; 168
    1f88:	0e 94 22 02 	call	0x444	; 0x444 <sendTwoCommandByte>
	sendTwoCommandByte(0xD3,0x00);
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	83 ed       	ldi	r24, 0xD3	; 211
    1f90:	0e 94 22 02 	call	0x444	; 0x444 <sendTwoCommandByte>
	sendOneCommandByte(0x40);
    1f94:	80 e4       	ldi	r24, 0x40	; 64
    1f96:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0xA1);
    1f9a:	81 ea       	ldi	r24, 0xA1	; 161
    1f9c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0xC8);
    1fa0:	88 ec       	ldi	r24, 0xC8	; 200
    1fa2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendTwoCommandByte(0xDA,0x12);
    1fa6:	62 e1       	ldi	r22, 0x12	; 18
    1fa8:	8a ed       	ldi	r24, 0xDA	; 218
    1faa:	0e 94 22 02 	call	0x444	; 0x444 <sendTwoCommandByte>
	sendTwoCommandByte(0x81,0x66);
    1fae:	66 e6       	ldi	r22, 0x66	; 102
    1fb0:	81 e8       	ldi	r24, 0x81	; 129
    1fb2:	0e 94 22 02 	call	0x444	; 0x444 <sendTwoCommandByte>
	sendTwoCommandByte(0xD9,0xF1);
    1fb6:	61 ef       	ldi	r22, 0xF1	; 241
    1fb8:	89 ed       	ldi	r24, 0xD9	; 217
    1fba:	0e 94 22 02 	call	0x444	; 0x444 <sendTwoCommandByte>
	sendTwoCommandByte(0xD8,0x30);
    1fbe:	60 e3       	ldi	r22, 0x30	; 48
    1fc0:	88 ed       	ldi	r24, 0xD8	; 216
    1fc2:	0e 94 22 02 	call	0x444	; 0x444 <sendTwoCommandByte>
	sendOneCommandByte(0xA4);
    1fc6:	84 ea       	ldi	r24, 0xA4	; 164
    1fc8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	sendOneCommandByte(0xA6);
    1fcc:	86 ea       	ldi	r24, 0xA6	; 166
    1fce:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
	
	sendTwoCommandByte(0x8D,0x14);
    1fd2:	64 e1       	ldi	r22, 0x14	; 20
    1fd4:	8d e8       	ldi	r24, 0x8D	; 141
    1fd6:	0e 94 22 02 	call	0x444	; 0x444 <sendTwoCommandByte>
	sendOneCommandByte(0xAF);
    1fda:	8f ea       	ldi	r24, 0xAF	; 175
    1fdc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendOneCommandByte>
    1fe0:	2f ef       	ldi	r18, 0xFF	; 255
    1fe2:	81 ee       	ldi	r24, 0xE1	; 225
    1fe4:	94 e0       	ldi	r25, 0x04	; 4
    1fe6:	21 50       	subi	r18, 0x01	; 1
    1fe8:	80 40       	sbci	r24, 0x00	; 0
    1fea:	90 40       	sbci	r25, 0x00	; 0
    1fec:	e1 f7       	brne	.-8      	; 0x1fe6 <oled_init+0x82>
    1fee:	00 c0       	rjmp	.+0      	; 0x1ff0 <oled_init+0x8c>
    1ff0:	00 00       	nop
	_delay_ms(100);
	
	sendTwoCommandByte(0x20,0x10);
    1ff2:	60 e1       	ldi	r22, 0x10	; 16
    1ff4:	80 e2       	ldi	r24, 0x20	; 32
    1ff6:	0e 94 22 02 	call	0x444	; 0x444 <sendTwoCommandByte>
	
	clearDisplay();
    1ffa:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <clearDisplay>
    1ffe:	2f ef       	ldi	r18, 0xFF	; 255
    2000:	83 ed       	ldi	r24, 0xD3	; 211
    2002:	90 e3       	ldi	r25, 0x30	; 48
    2004:	21 50       	subi	r18, 0x01	; 1
    2006:	80 40       	sbci	r24, 0x00	; 0
    2008:	90 40       	sbci	r25, 0x00	; 0
    200a:	e1 f7       	brne	.-8      	; 0x2004 <oled_init+0xa0>
    200c:	00 c0       	rjmp	.+0      	; 0x200e <oled_init+0xaa>
    200e:	00 00       	nop
    2010:	08 95       	ret

00002012 <main>:
int lastTens = 0;
int lastHundreds = 0;
int lastThousands = 0;

int main (void) {
	DDRC = 0x04; // Reset Toggle output
    2012:	84 e0       	ldi	r24, 0x04	; 4
    2014:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0x04; // Setting Reset to logic 1
    2016:	88 b1       	in	r24, 0x08	; 8
    2018:	84 60       	ori	r24, 0x04	; 4
    201a:	88 b9       	out	0x08, r24	; 8
    i2c_init(); // Initializing the OLED
    201c:	0e 94 b9 01 	call	0x372	; 0x372 <i2c_init>
	DDRD = 0x90;	// Sets PD5 to an output for the LED
    2020:	80 e9       	ldi	r24, 0x90	; 144
    2022:	8a b9       	out	0x0a, r24	; 10
	ADCint(); // Initializing the ADC
    2024:	0e 94 76 01 	call	0x2ec	; 0x2ec <ADCint>
	oled_init(); // Initializing the OLED
    2028:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <oled_init>
	Timer0Settings(); // Timer 0 Settings
    202c:	0e 94 2a 01 	call	0x254	; 0x254 <Timer0Settings>
	
	
	// External Interrupt Control Register
	// ISC11 - 1, ISC10 - 1
	// Rising edge of INT1 generates an interrupt request
	EICRA |= (1 << ISC11) | (1 << ISC10);
    2030:	e9 e6       	ldi	r30, 0x69	; 105
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8c 60       	ori	r24, 0x0C	; 12
    2038:	80 83       	st	Z, r24
	// External Interrupt Mask Register
	// INT1 - 1
	// External Interrupt Request 1 Enable
	EIMSK |= (1 << INT1);
    203a:	8d b3       	in	r24, 0x1d	; 29
    203c:	82 60       	ori	r24, 0x02	; 2
    203e:	8d bb       	out	0x1d, r24	; 29
	sei();
    2040:	78 94       	sei
	
	gameStart(); // Display the start message to the screen
    2042:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <gameStart>
	background(); // Displays the background
    2046:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <background>
	drawRex(); // Displays a T-Rex
    204a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <drawRex>
	stickPress(); // Waits to start game until button has been pressed
    204e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <stickPress>
	gameLoop(); // Loop while game is running
    2052:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <gameLoop>

00002056 <__subsf3>:
    2056:	50 58       	subi	r21, 0x80	; 128

00002058 <__addsf3>:
    2058:	bb 27       	eor	r27, r27
    205a:	aa 27       	eor	r26, r26
    205c:	0e 94 43 10 	call	0x2086	; 0x2086 <__addsf3x>
    2060:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__fp_round>
    2064:	0e 94 3d 11 	call	0x227a	; 0x227a <__fp_pscA>
    2068:	38 f0       	brcs	.+14     	; 0x2078 <__addsf3+0x20>
    206a:	0e 94 44 11 	call	0x2288	; 0x2288 <__fp_pscB>
    206e:	20 f0       	brcs	.+8      	; 0x2078 <__addsf3+0x20>
    2070:	39 f4       	brne	.+14     	; 0x2080 <__addsf3+0x28>
    2072:	9f 3f       	cpi	r25, 0xFF	; 255
    2074:	19 f4       	brne	.+6      	; 0x207c <__addsf3+0x24>
    2076:	26 f4       	brtc	.+8      	; 0x2080 <__addsf3+0x28>
    2078:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__fp_nan>
    207c:	0e f4       	brtc	.+2      	; 0x2080 <__addsf3+0x28>
    207e:	e0 95       	com	r30
    2080:	e7 fb       	bst	r30, 7
    2082:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__fp_inf>

00002086 <__addsf3x>:
    2086:	e9 2f       	mov	r30, r25
    2088:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__fp_split3>
    208c:	58 f3       	brcs	.-42     	; 0x2064 <__addsf3+0xc>
    208e:	ba 17       	cp	r27, r26
    2090:	62 07       	cpc	r22, r18
    2092:	73 07       	cpc	r23, r19
    2094:	84 07       	cpc	r24, r20
    2096:	95 07       	cpc	r25, r21
    2098:	20 f0       	brcs	.+8      	; 0x20a2 <__addsf3x+0x1c>
    209a:	79 f4       	brne	.+30     	; 0x20ba <__addsf3x+0x34>
    209c:	a6 f5       	brtc	.+104    	; 0x2106 <__addsf3x+0x80>
    209e:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__fp_zero>
    20a2:	0e f4       	brtc	.+2      	; 0x20a6 <__addsf3x+0x20>
    20a4:	e0 95       	com	r30
    20a6:	0b 2e       	mov	r0, r27
    20a8:	ba 2f       	mov	r27, r26
    20aa:	a0 2d       	mov	r26, r0
    20ac:	0b 01       	movw	r0, r22
    20ae:	b9 01       	movw	r22, r18
    20b0:	90 01       	movw	r18, r0
    20b2:	0c 01       	movw	r0, r24
    20b4:	ca 01       	movw	r24, r20
    20b6:	a0 01       	movw	r20, r0
    20b8:	11 24       	eor	r1, r1
    20ba:	ff 27       	eor	r31, r31
    20bc:	59 1b       	sub	r21, r25
    20be:	99 f0       	breq	.+38     	; 0x20e6 <__addsf3x+0x60>
    20c0:	59 3f       	cpi	r21, 0xF9	; 249
    20c2:	50 f4       	brcc	.+20     	; 0x20d8 <__addsf3x+0x52>
    20c4:	50 3e       	cpi	r21, 0xE0	; 224
    20c6:	68 f1       	brcs	.+90     	; 0x2122 <__addsf3x+0x9c>
    20c8:	1a 16       	cp	r1, r26
    20ca:	f0 40       	sbci	r31, 0x00	; 0
    20cc:	a2 2f       	mov	r26, r18
    20ce:	23 2f       	mov	r18, r19
    20d0:	34 2f       	mov	r19, r20
    20d2:	44 27       	eor	r20, r20
    20d4:	58 5f       	subi	r21, 0xF8	; 248
    20d6:	f3 cf       	rjmp	.-26     	; 0x20be <__addsf3x+0x38>
    20d8:	46 95       	lsr	r20
    20da:	37 95       	ror	r19
    20dc:	27 95       	ror	r18
    20de:	a7 95       	ror	r26
    20e0:	f0 40       	sbci	r31, 0x00	; 0
    20e2:	53 95       	inc	r21
    20e4:	c9 f7       	brne	.-14     	; 0x20d8 <__addsf3x+0x52>
    20e6:	7e f4       	brtc	.+30     	; 0x2106 <__addsf3x+0x80>
    20e8:	1f 16       	cp	r1, r31
    20ea:	ba 0b       	sbc	r27, r26
    20ec:	62 0b       	sbc	r22, r18
    20ee:	73 0b       	sbc	r23, r19
    20f0:	84 0b       	sbc	r24, r20
    20f2:	ba f0       	brmi	.+46     	; 0x2122 <__addsf3x+0x9c>
    20f4:	91 50       	subi	r25, 0x01	; 1
    20f6:	a1 f0       	breq	.+40     	; 0x2120 <__addsf3x+0x9a>
    20f8:	ff 0f       	add	r31, r31
    20fa:	bb 1f       	adc	r27, r27
    20fc:	66 1f       	adc	r22, r22
    20fe:	77 1f       	adc	r23, r23
    2100:	88 1f       	adc	r24, r24
    2102:	c2 f7       	brpl	.-16     	; 0x20f4 <__addsf3x+0x6e>
    2104:	0e c0       	rjmp	.+28     	; 0x2122 <__addsf3x+0x9c>
    2106:	ba 0f       	add	r27, r26
    2108:	62 1f       	adc	r22, r18
    210a:	73 1f       	adc	r23, r19
    210c:	84 1f       	adc	r24, r20
    210e:	48 f4       	brcc	.+18     	; 0x2122 <__addsf3x+0x9c>
    2110:	87 95       	ror	r24
    2112:	77 95       	ror	r23
    2114:	67 95       	ror	r22
    2116:	b7 95       	ror	r27
    2118:	f7 95       	ror	r31
    211a:	9e 3f       	cpi	r25, 0xFE	; 254
    211c:	08 f0       	brcs	.+2      	; 0x2120 <__addsf3x+0x9a>
    211e:	b0 cf       	rjmp	.-160    	; 0x2080 <__addsf3+0x28>
    2120:	93 95       	inc	r25
    2122:	88 0f       	add	r24, r24
    2124:	08 f0       	brcs	.+2      	; 0x2128 <__addsf3x+0xa2>
    2126:	99 27       	eor	r25, r25
    2128:	ee 0f       	add	r30, r30
    212a:	97 95       	ror	r25
    212c:	87 95       	ror	r24
    212e:	08 95       	ret

00002130 <__cmpsf2>:
    2130:	0e 94 10 11 	call	0x2220	; 0x2220 <__fp_cmp>
    2134:	08 f4       	brcc	.+2      	; 0x2138 <__cmpsf2+0x8>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	08 95       	ret

0000213a <__fixsfsi>:
    213a:	0e 94 a4 10 	call	0x2148	; 0x2148 <__fixunssfsi>
    213e:	68 94       	set
    2140:	b1 11       	cpse	r27, r1
    2142:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__fp_szero>
    2146:	08 95       	ret

00002148 <__fixunssfsi>:
    2148:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__fp_splitA>
    214c:	88 f0       	brcs	.+34     	; 0x2170 <__fixunssfsi+0x28>
    214e:	9f 57       	subi	r25, 0x7F	; 127
    2150:	98 f0       	brcs	.+38     	; 0x2178 <__fixunssfsi+0x30>
    2152:	b9 2f       	mov	r27, r25
    2154:	99 27       	eor	r25, r25
    2156:	b7 51       	subi	r27, 0x17	; 23
    2158:	b0 f0       	brcs	.+44     	; 0x2186 <__fixunssfsi+0x3e>
    215a:	e1 f0       	breq	.+56     	; 0x2194 <__fixunssfsi+0x4c>
    215c:	66 0f       	add	r22, r22
    215e:	77 1f       	adc	r23, r23
    2160:	88 1f       	adc	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	1a f0       	brmi	.+6      	; 0x216c <__fixunssfsi+0x24>
    2166:	ba 95       	dec	r27
    2168:	c9 f7       	brne	.-14     	; 0x215c <__fixunssfsi+0x14>
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <__fixunssfsi+0x4c>
    216c:	b1 30       	cpi	r27, 0x01	; 1
    216e:	91 f0       	breq	.+36     	; 0x2194 <__fixunssfsi+0x4c>
    2170:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__fp_zero>
    2174:	b1 e0       	ldi	r27, 0x01	; 1
    2176:	08 95       	ret
    2178:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__fp_zero>
    217c:	67 2f       	mov	r22, r23
    217e:	78 2f       	mov	r23, r24
    2180:	88 27       	eor	r24, r24
    2182:	b8 5f       	subi	r27, 0xF8	; 248
    2184:	39 f0       	breq	.+14     	; 0x2194 <__fixunssfsi+0x4c>
    2186:	b9 3f       	cpi	r27, 0xF9	; 249
    2188:	cc f3       	brlt	.-14     	; 0x217c <__fixunssfsi+0x34>
    218a:	86 95       	lsr	r24
    218c:	77 95       	ror	r23
    218e:	67 95       	ror	r22
    2190:	b3 95       	inc	r27
    2192:	d9 f7       	brne	.-10     	; 0x218a <__fixunssfsi+0x42>
    2194:	3e f4       	brtc	.+14     	; 0x21a4 <__fixunssfsi+0x5c>
    2196:	90 95       	com	r25
    2198:	80 95       	com	r24
    219a:	70 95       	com	r23
    219c:	61 95       	neg	r22
    219e:	7f 4f       	sbci	r23, 0xFF	; 255
    21a0:	8f 4f       	sbci	r24, 0xFF	; 255
    21a2:	9f 4f       	sbci	r25, 0xFF	; 255
    21a4:	08 95       	ret

000021a6 <__floatunsisf>:
    21a6:	e8 94       	clt
    21a8:	09 c0       	rjmp	.+18     	; 0x21bc <__floatsisf+0x12>

000021aa <__floatsisf>:
    21aa:	97 fb       	bst	r25, 7
    21ac:	3e f4       	brtc	.+14     	; 0x21bc <__floatsisf+0x12>
    21ae:	90 95       	com	r25
    21b0:	80 95       	com	r24
    21b2:	70 95       	com	r23
    21b4:	61 95       	neg	r22
    21b6:	7f 4f       	sbci	r23, 0xFF	; 255
    21b8:	8f 4f       	sbci	r24, 0xFF	; 255
    21ba:	9f 4f       	sbci	r25, 0xFF	; 255
    21bc:	99 23       	and	r25, r25
    21be:	a9 f0       	breq	.+42     	; 0x21ea <__floatsisf+0x40>
    21c0:	f9 2f       	mov	r31, r25
    21c2:	96 e9       	ldi	r25, 0x96	; 150
    21c4:	bb 27       	eor	r27, r27
    21c6:	93 95       	inc	r25
    21c8:	f6 95       	lsr	r31
    21ca:	87 95       	ror	r24
    21cc:	77 95       	ror	r23
    21ce:	67 95       	ror	r22
    21d0:	b7 95       	ror	r27
    21d2:	f1 11       	cpse	r31, r1
    21d4:	f8 cf       	rjmp	.-16     	; 0x21c6 <__floatsisf+0x1c>
    21d6:	fa f4       	brpl	.+62     	; 0x2216 <__floatsisf+0x6c>
    21d8:	bb 0f       	add	r27, r27
    21da:	11 f4       	brne	.+4      	; 0x21e0 <__floatsisf+0x36>
    21dc:	60 ff       	sbrs	r22, 0
    21de:	1b c0       	rjmp	.+54     	; 0x2216 <__floatsisf+0x6c>
    21e0:	6f 5f       	subi	r22, 0xFF	; 255
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	8f 4f       	sbci	r24, 0xFF	; 255
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	16 c0       	rjmp	.+44     	; 0x2216 <__floatsisf+0x6c>
    21ea:	88 23       	and	r24, r24
    21ec:	11 f0       	breq	.+4      	; 0x21f2 <__floatsisf+0x48>
    21ee:	96 e9       	ldi	r25, 0x96	; 150
    21f0:	11 c0       	rjmp	.+34     	; 0x2214 <__floatsisf+0x6a>
    21f2:	77 23       	and	r23, r23
    21f4:	21 f0       	breq	.+8      	; 0x21fe <__floatsisf+0x54>
    21f6:	9e e8       	ldi	r25, 0x8E	; 142
    21f8:	87 2f       	mov	r24, r23
    21fa:	76 2f       	mov	r23, r22
    21fc:	05 c0       	rjmp	.+10     	; 0x2208 <__floatsisf+0x5e>
    21fe:	66 23       	and	r22, r22
    2200:	71 f0       	breq	.+28     	; 0x221e <__floatsisf+0x74>
    2202:	96 e8       	ldi	r25, 0x86	; 134
    2204:	86 2f       	mov	r24, r22
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	2a f0       	brmi	.+10     	; 0x2216 <__floatsisf+0x6c>
    220c:	9a 95       	dec	r25
    220e:	66 0f       	add	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	88 1f       	adc	r24, r24
    2214:	da f7       	brpl	.-10     	; 0x220c <__floatsisf+0x62>
    2216:	88 0f       	add	r24, r24
    2218:	96 95       	lsr	r25
    221a:	87 95       	ror	r24
    221c:	97 f9       	bld	r25, 7
    221e:	08 95       	ret

00002220 <__fp_cmp>:
    2220:	99 0f       	add	r25, r25
    2222:	00 08       	sbc	r0, r0
    2224:	55 0f       	add	r21, r21
    2226:	aa 0b       	sbc	r26, r26
    2228:	e0 e8       	ldi	r30, 0x80	; 128
    222a:	fe ef       	ldi	r31, 0xFE	; 254
    222c:	16 16       	cp	r1, r22
    222e:	17 06       	cpc	r1, r23
    2230:	e8 07       	cpc	r30, r24
    2232:	f9 07       	cpc	r31, r25
    2234:	c0 f0       	brcs	.+48     	; 0x2266 <__fp_cmp+0x46>
    2236:	12 16       	cp	r1, r18
    2238:	13 06       	cpc	r1, r19
    223a:	e4 07       	cpc	r30, r20
    223c:	f5 07       	cpc	r31, r21
    223e:	98 f0       	brcs	.+38     	; 0x2266 <__fp_cmp+0x46>
    2240:	62 1b       	sub	r22, r18
    2242:	73 0b       	sbc	r23, r19
    2244:	84 0b       	sbc	r24, r20
    2246:	95 0b       	sbc	r25, r21
    2248:	39 f4       	brne	.+14     	; 0x2258 <__fp_cmp+0x38>
    224a:	0a 26       	eor	r0, r26
    224c:	61 f0       	breq	.+24     	; 0x2266 <__fp_cmp+0x46>
    224e:	23 2b       	or	r18, r19
    2250:	24 2b       	or	r18, r20
    2252:	25 2b       	or	r18, r21
    2254:	21 f4       	brne	.+8      	; 0x225e <__fp_cmp+0x3e>
    2256:	08 95       	ret
    2258:	0a 26       	eor	r0, r26
    225a:	09 f4       	brne	.+2      	; 0x225e <__fp_cmp+0x3e>
    225c:	a1 40       	sbci	r26, 0x01	; 1
    225e:	a6 95       	lsr	r26
    2260:	8f ef       	ldi	r24, 0xFF	; 255
    2262:	81 1d       	adc	r24, r1
    2264:	81 1d       	adc	r24, r1
    2266:	08 95       	ret

00002268 <__fp_inf>:
    2268:	97 f9       	bld	r25, 7
    226a:	9f 67       	ori	r25, 0x7F	; 127
    226c:	80 e8       	ldi	r24, 0x80	; 128
    226e:	70 e0       	ldi	r23, 0x00	; 0
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	08 95       	ret

00002274 <__fp_nan>:
    2274:	9f ef       	ldi	r25, 0xFF	; 255
    2276:	80 ec       	ldi	r24, 0xC0	; 192
    2278:	08 95       	ret

0000227a <__fp_pscA>:
    227a:	00 24       	eor	r0, r0
    227c:	0a 94       	dec	r0
    227e:	16 16       	cp	r1, r22
    2280:	17 06       	cpc	r1, r23
    2282:	18 06       	cpc	r1, r24
    2284:	09 06       	cpc	r0, r25
    2286:	08 95       	ret

00002288 <__fp_pscB>:
    2288:	00 24       	eor	r0, r0
    228a:	0a 94       	dec	r0
    228c:	12 16       	cp	r1, r18
    228e:	13 06       	cpc	r1, r19
    2290:	14 06       	cpc	r1, r20
    2292:	05 06       	cpc	r0, r21
    2294:	08 95       	ret

00002296 <__fp_round>:
    2296:	09 2e       	mov	r0, r25
    2298:	03 94       	inc	r0
    229a:	00 0c       	add	r0, r0
    229c:	11 f4       	brne	.+4      	; 0x22a2 <__fp_round+0xc>
    229e:	88 23       	and	r24, r24
    22a0:	52 f0       	brmi	.+20     	; 0x22b6 <__fp_round+0x20>
    22a2:	bb 0f       	add	r27, r27
    22a4:	40 f4       	brcc	.+16     	; 0x22b6 <__fp_round+0x20>
    22a6:	bf 2b       	or	r27, r31
    22a8:	11 f4       	brne	.+4      	; 0x22ae <__fp_round+0x18>
    22aa:	60 ff       	sbrs	r22, 0
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__fp_round+0x20>
    22ae:	6f 5f       	subi	r22, 0xFF	; 255
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	8f 4f       	sbci	r24, 0xFF	; 255
    22b4:	9f 4f       	sbci	r25, 0xFF	; 255
    22b6:	08 95       	ret

000022b8 <__fp_split3>:
    22b8:	57 fd       	sbrc	r21, 7
    22ba:	90 58       	subi	r25, 0x80	; 128
    22bc:	44 0f       	add	r20, r20
    22be:	55 1f       	adc	r21, r21
    22c0:	59 f0       	breq	.+22     	; 0x22d8 <__fp_splitA+0x10>
    22c2:	5f 3f       	cpi	r21, 0xFF	; 255
    22c4:	71 f0       	breq	.+28     	; 0x22e2 <__fp_splitA+0x1a>
    22c6:	47 95       	ror	r20

000022c8 <__fp_splitA>:
    22c8:	88 0f       	add	r24, r24
    22ca:	97 fb       	bst	r25, 7
    22cc:	99 1f       	adc	r25, r25
    22ce:	61 f0       	breq	.+24     	; 0x22e8 <__fp_splitA+0x20>
    22d0:	9f 3f       	cpi	r25, 0xFF	; 255
    22d2:	79 f0       	breq	.+30     	; 0x22f2 <__fp_splitA+0x2a>
    22d4:	87 95       	ror	r24
    22d6:	08 95       	ret
    22d8:	12 16       	cp	r1, r18
    22da:	13 06       	cpc	r1, r19
    22dc:	14 06       	cpc	r1, r20
    22de:	55 1f       	adc	r21, r21
    22e0:	f2 cf       	rjmp	.-28     	; 0x22c6 <__fp_split3+0xe>
    22e2:	46 95       	lsr	r20
    22e4:	f1 df       	rcall	.-30     	; 0x22c8 <__fp_splitA>
    22e6:	08 c0       	rjmp	.+16     	; 0x22f8 <__fp_splitA+0x30>
    22e8:	16 16       	cp	r1, r22
    22ea:	17 06       	cpc	r1, r23
    22ec:	18 06       	cpc	r1, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	f1 cf       	rjmp	.-30     	; 0x22d4 <__fp_splitA+0xc>
    22f2:	86 95       	lsr	r24
    22f4:	71 05       	cpc	r23, r1
    22f6:	61 05       	cpc	r22, r1
    22f8:	08 94       	sec
    22fa:	08 95       	ret

000022fc <__fp_zero>:
    22fc:	e8 94       	clt

000022fe <__fp_szero>:
    22fe:	bb 27       	eor	r27, r27
    2300:	66 27       	eor	r22, r22
    2302:	77 27       	eor	r23, r23
    2304:	cb 01       	movw	r24, r22
    2306:	97 f9       	bld	r25, 7
    2308:	08 95       	ret

0000230a <__divmodhi4>:
    230a:	97 fb       	bst	r25, 7
    230c:	07 2e       	mov	r0, r23
    230e:	16 f4       	brtc	.+4      	; 0x2314 <__divmodhi4+0xa>
    2310:	00 94       	com	r0
    2312:	07 d0       	rcall	.+14     	; 0x2322 <__divmodhi4_neg1>
    2314:	77 fd       	sbrc	r23, 7
    2316:	09 d0       	rcall	.+18     	; 0x232a <__divmodhi4_neg2>
    2318:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodhi4>
    231c:	07 fc       	sbrc	r0, 7
    231e:	05 d0       	rcall	.+10     	; 0x232a <__divmodhi4_neg2>
    2320:	3e f4       	brtc	.+14     	; 0x2330 <__divmodhi4_exit>

00002322 <__divmodhi4_neg1>:
    2322:	90 95       	com	r25
    2324:	81 95       	neg	r24
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	08 95       	ret

0000232a <__divmodhi4_neg2>:
    232a:	70 95       	com	r23
    232c:	61 95       	neg	r22
    232e:	7f 4f       	sbci	r23, 0xFF	; 255

00002330 <__divmodhi4_exit>:
    2330:	08 95       	ret

00002332 <__udivmodhi4>:
    2332:	aa 1b       	sub	r26, r26
    2334:	bb 1b       	sub	r27, r27
    2336:	51 e1       	ldi	r21, 0x11	; 17
    2338:	07 c0       	rjmp	.+14     	; 0x2348 <__udivmodhi4_ep>

0000233a <__udivmodhi4_loop>:
    233a:	aa 1f       	adc	r26, r26
    233c:	bb 1f       	adc	r27, r27
    233e:	a6 17       	cp	r26, r22
    2340:	b7 07       	cpc	r27, r23
    2342:	10 f0       	brcs	.+4      	; 0x2348 <__udivmodhi4_ep>
    2344:	a6 1b       	sub	r26, r22
    2346:	b7 0b       	sbc	r27, r23

00002348 <__udivmodhi4_ep>:
    2348:	88 1f       	adc	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	5a 95       	dec	r21
    234e:	a9 f7       	brne	.-22     	; 0x233a <__udivmodhi4_loop>
    2350:	80 95       	com	r24
    2352:	90 95       	com	r25
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	08 95       	ret

0000235a <do_rand>:
    235a:	8f 92       	push	r8
    235c:	9f 92       	push	r9
    235e:	af 92       	push	r10
    2360:	bf 92       	push	r11
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	ec 01       	movw	r28, r24
    2370:	68 81       	ld	r22, Y
    2372:	79 81       	ldd	r23, Y+1	; 0x01
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	9b 81       	ldd	r25, Y+3	; 0x03
    2378:	61 15       	cp	r22, r1
    237a:	71 05       	cpc	r23, r1
    237c:	81 05       	cpc	r24, r1
    237e:	91 05       	cpc	r25, r1
    2380:	21 f4       	brne	.+8      	; 0x238a <do_rand+0x30>
    2382:	64 e2       	ldi	r22, 0x24	; 36
    2384:	79 ed       	ldi	r23, 0xD9	; 217
    2386:	8b e5       	ldi	r24, 0x5B	; 91
    2388:	97 e0       	ldi	r25, 0x07	; 7
    238a:	2d e1       	ldi	r18, 0x1D	; 29
    238c:	33 ef       	ldi	r19, 0xF3	; 243
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	50 e0       	ldi	r21, 0x00	; 0
    2392:	0e 94 09 12 	call	0x2412	; 0x2412 <__divmodsi4>
    2396:	49 01       	movw	r8, r18
    2398:	5a 01       	movw	r10, r20
    239a:	9b 01       	movw	r18, r22
    239c:	ac 01       	movw	r20, r24
    239e:	a7 ea       	ldi	r26, 0xA7	; 167
    23a0:	b1 e4       	ldi	r27, 0x41	; 65
    23a2:	0e 94 28 12 	call	0x2450	; 0x2450 <__muluhisi3>
    23a6:	6b 01       	movw	r12, r22
    23a8:	7c 01       	movw	r14, r24
    23aa:	ac ee       	ldi	r26, 0xEC	; 236
    23ac:	b4 ef       	ldi	r27, 0xF4	; 244
    23ae:	a5 01       	movw	r20, r10
    23b0:	94 01       	movw	r18, r8
    23b2:	0e 94 36 12 	call	0x246c	; 0x246c <__mulohisi3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8c 0d       	add	r24, r12
    23bc:	9d 1d       	adc	r25, r13
    23be:	ae 1d       	adc	r26, r14
    23c0:	bf 1d       	adc	r27, r15
    23c2:	b7 ff       	sbrs	r27, 7
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <do_rand+0x72>
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	a1 09       	sbc	r26, r1
    23ca:	b0 48       	sbci	r27, 0x80	; 128
    23cc:	88 83       	st	Y, r24
    23ce:	99 83       	std	Y+1, r25	; 0x01
    23d0:	aa 83       	std	Y+2, r26	; 0x02
    23d2:	bb 83       	std	Y+3, r27	; 0x03
    23d4:	9f 77       	andi	r25, 0x7F	; 127
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	ff 90       	pop	r15
    23dc:	ef 90       	pop	r14
    23de:	df 90       	pop	r13
    23e0:	cf 90       	pop	r12
    23e2:	bf 90       	pop	r11
    23e4:	af 90       	pop	r10
    23e6:	9f 90       	pop	r9
    23e8:	8f 90       	pop	r8
    23ea:	08 95       	ret

000023ec <rand_r>:
    23ec:	0e 94 ad 11 	call	0x235a	; 0x235a <do_rand>
    23f0:	08 95       	ret

000023f2 <rand>:
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	91 e0       	ldi	r25, 0x01	; 1
    23f6:	0e 94 ad 11 	call	0x235a	; 0x235a <do_rand>
    23fa:	08 95       	ret

000023fc <srand>:
    23fc:	a0 e0       	ldi	r26, 0x00	; 0
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2404:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2408:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    240c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    2410:	08 95       	ret

00002412 <__divmodsi4>:
    2412:	05 2e       	mov	r0, r21
    2414:	97 fb       	bst	r25, 7
    2416:	1e f4       	brtc	.+6      	; 0x241e <__divmodsi4+0xc>
    2418:	00 94       	com	r0
    241a:	0e 94 20 12 	call	0x2440	; 0x2440 <__negsi2>
    241e:	57 fd       	sbrc	r21, 7
    2420:	07 d0       	rcall	.+14     	; 0x2430 <__divmodsi4_neg2>
    2422:	0e 94 3b 12 	call	0x2476	; 0x2476 <__udivmodsi4>
    2426:	07 fc       	sbrc	r0, 7
    2428:	03 d0       	rcall	.+6      	; 0x2430 <__divmodsi4_neg2>
    242a:	4e f4       	brtc	.+18     	; 0x243e <__divmodsi4_exit>
    242c:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__negsi2>

00002430 <__divmodsi4_neg2>:
    2430:	50 95       	com	r21
    2432:	40 95       	com	r20
    2434:	30 95       	com	r19
    2436:	21 95       	neg	r18
    2438:	3f 4f       	sbci	r19, 0xFF	; 255
    243a:	4f 4f       	sbci	r20, 0xFF	; 255
    243c:	5f 4f       	sbci	r21, 0xFF	; 255

0000243e <__divmodsi4_exit>:
    243e:	08 95       	ret

00002440 <__negsi2>:
    2440:	90 95       	com	r25
    2442:	80 95       	com	r24
    2444:	70 95       	com	r23
    2446:	61 95       	neg	r22
    2448:	7f 4f       	sbci	r23, 0xFF	; 255
    244a:	8f 4f       	sbci	r24, 0xFF	; 255
    244c:	9f 4f       	sbci	r25, 0xFF	; 255
    244e:	08 95       	ret

00002450 <__muluhisi3>:
    2450:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__umulhisi3>
    2454:	a5 9f       	mul	r26, r21
    2456:	90 0d       	add	r25, r0
    2458:	b4 9f       	mul	r27, r20
    245a:	90 0d       	add	r25, r0
    245c:	a4 9f       	mul	r26, r20
    245e:	80 0d       	add	r24, r0
    2460:	91 1d       	adc	r25, r1
    2462:	11 24       	eor	r1, r1
    2464:	08 95       	ret

00002466 <__mulshisi3>:
    2466:	b7 ff       	sbrs	r27, 7
    2468:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__muluhisi3>

0000246c <__mulohisi3>:
    246c:	0e 94 28 12 	call	0x2450	; 0x2450 <__muluhisi3>
    2470:	82 1b       	sub	r24, r18
    2472:	93 0b       	sbc	r25, r19
    2474:	08 95       	ret

00002476 <__udivmodsi4>:
    2476:	a1 e2       	ldi	r26, 0x21	; 33
    2478:	1a 2e       	mov	r1, r26
    247a:	aa 1b       	sub	r26, r26
    247c:	bb 1b       	sub	r27, r27
    247e:	fd 01       	movw	r30, r26
    2480:	0d c0       	rjmp	.+26     	; 0x249c <__udivmodsi4_ep>

00002482 <__udivmodsi4_loop>:
    2482:	aa 1f       	adc	r26, r26
    2484:	bb 1f       	adc	r27, r27
    2486:	ee 1f       	adc	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	a2 17       	cp	r26, r18
    248c:	b3 07       	cpc	r27, r19
    248e:	e4 07       	cpc	r30, r20
    2490:	f5 07       	cpc	r31, r21
    2492:	20 f0       	brcs	.+8      	; 0x249c <__udivmodsi4_ep>
    2494:	a2 1b       	sub	r26, r18
    2496:	b3 0b       	sbc	r27, r19
    2498:	e4 0b       	sbc	r30, r20
    249a:	f5 0b       	sbc	r31, r21

0000249c <__udivmodsi4_ep>:
    249c:	66 1f       	adc	r22, r22
    249e:	77 1f       	adc	r23, r23
    24a0:	88 1f       	adc	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	1a 94       	dec	r1
    24a6:	69 f7       	brne	.-38     	; 0x2482 <__udivmodsi4_loop>
    24a8:	60 95       	com	r22
    24aa:	70 95       	com	r23
    24ac:	80 95       	com	r24
    24ae:	90 95       	com	r25
    24b0:	9b 01       	movw	r18, r22
    24b2:	ac 01       	movw	r20, r24
    24b4:	bd 01       	movw	r22, r26
    24b6:	cf 01       	movw	r24, r30
    24b8:	08 95       	ret

000024ba <__umulhisi3>:
    24ba:	a2 9f       	mul	r26, r18
    24bc:	b0 01       	movw	r22, r0
    24be:	b3 9f       	mul	r27, r19
    24c0:	c0 01       	movw	r24, r0
    24c2:	a3 9f       	mul	r26, r19
    24c4:	70 0d       	add	r23, r0
    24c6:	81 1d       	adc	r24, r1
    24c8:	11 24       	eor	r1, r1
    24ca:	91 1d       	adc	r25, r1
    24cc:	b2 9f       	mul	r27, r18
    24ce:	70 0d       	add	r23, r0
    24d0:	81 1d       	adc	r24, r1
    24d2:	11 24       	eor	r1, r1
    24d4:	91 1d       	adc	r25, r1
    24d6:	08 95       	ret

000024d8 <_exit>:
    24d8:	f8 94       	cli

000024da <__stop_program>:
    24da:	ff cf       	rjmp	.-2      	; 0x24da <__stop_program>
